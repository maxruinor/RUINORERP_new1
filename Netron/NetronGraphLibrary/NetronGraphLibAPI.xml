<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetronGraphLib</name>
    </assembly>
    <members>
        <member name="T:Netron.GraphLib.Attributes.NetronGraphAttribute">
            <summary>
            Abstract base class for the attributes related to serialization
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mKey">
            <summary>
            the key of the shape, usually a GUID
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mName">
            <summary>
            the name of the shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mReflectionName">
            <summary>
            the full name of the shape to reflect
            </summary>
            
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mDescription">
            <summary>
            a description
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mIsInternal">
            <summary>
            whether the shape is only accessible via code or internally
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.ReflectionName">
            <summary>
            Gets or sets the full name to reflect the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.Description">
            <summary>
            Gets a mDescription of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.Key">
            <summary>
            Gets the unique identifier of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.Name">
            <summary>
            Gets the shape name
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.IsInternal">
            <summary>
            Gets whether the entity is available via the interface or false if only via code
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Attributes.NetronGraphShapeAttribute">
            <summary>
            Attribute to tag a class as a Netron graph shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.mShapeCategory">
            <summary>
            the cateogry under which it will stay
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.ShapeCategory">
            <summary>
            Gets the category of the shape under which it will reside in a viewer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor, marks a class as a shape-class for the Netron graph library
            </summary>
            <param name="mShapeName"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor, marks a class as a shape-class for the Netron graph library
            </summary>
            <param name="mShapeName"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
            <param name="mDescription"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor, marks a class as a shape-class for the Netron graph library
            </summary>
            <param name="mShapeName"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
            <param name="mDescription"></param>
            <param name="internalUsage"></param>
        </member>
        <member name="T:Netron.GraphLib.Attributes.NetronGraphConnectionAttribute">
            <summary>
            Attribute to tag a class as a Netron graph connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.NetronGraphConnectionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionName"></param>
            <param name="key"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="T:Netron.GraphLib.Attributes.ConnectionStyleAttribute">
            <summary>
            Attribute to tag a class as a Netron graph connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.ConnectionStyleAttribute.mExtraStyles">
            <summary>
            ArrayList of extra connection-styles
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.ConnectionStyleAttribute.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor, marks a class as custom connection
            </summary>
            <param name="extra"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.ConnectionStyleAttribute.#ctor">
            <summary>
            Constructor, marks a class as a custom connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.ConnectionStyleAttribute.ExtraStyles">
            <summary>
            Gets or sets the ArrayList of custom connection styles
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Attributes.GraphLayerAttribute">
            <summary>
            Attribute to tag a class as a Netron graph layer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.GraphLayerAttribute.mLayers">
            <summary>
            STC of layers
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.GraphLayerAttribute.#ctor(Netron.GraphLib.GraphLayerCollection)">
            <summary>
            Constructor, marks a class as a graph-layer
            </summary>
            <param name="layers"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.GraphLayerAttribute.#ctor">
            <summary>
            Constructor, marks a class as a graph-layer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.GraphLayerAttribute.Layers">
            <summary>
            Gets or sets the layer-collection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Attributes.ReflectedEnumAttribute">
            <summary>
            Attribute to tag a class as a reflected enum type.
            This solves the problem that an Enum type in a reflected assembly is not available in the propertygrid.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.ReflectedEnumAttribute.mEnums">
            <summary>
            ArrayList of extra connection-styles
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.ReflectedEnumAttribute.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor, marks a class as custom connection
            </summary>
            <param name="extra"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.ReflectedEnumAttribute.#ctor">
            <summary>
            Constructor, marks a class as a custom connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.ReflectedEnumAttribute.Enums">
            <summary>
            Gets or sets the ArrayList of custom connection styles
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Attributes.GraphMLDataAttribute">
            <summary>
            Attribute class for designating which properties will be serialized
            by the NML serializer.
            </summary>	
        </member>
        <member name="M:Netron.GraphLib.Attributes.GraphMLDataAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.GraphMLDataAttribute.GetValuesOfTaggedFields(System.Object)">
            <summary>
            Returns a PropertiesHashtable of name-values for the given object's properties
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.BasicShapes.BasicNode">
            <summary>
            A simple rectangular shape with four connectors.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            This is the default constructor of the class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.GetThumbnail">
            <summary>
            Overrides the default bitmap used in the shape viewer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the shape of the person object in the plex. Here you can let your imagination go.
            MAKE IT PERFORMANT, this is a killer method called 200.000 times a minute!
            </summary>
            <param name="g">The graphics canvas onto which to paint</param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.ConnectionPoint(Netron.GraphLib.Connector)">
            <summary>
            Returns a floating-point point coordinates for a given connector
            </summary>
            <param name="c">A connector object</param>
            <returns>A floating-point pointF</returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Netron.GraphLib.BasicShapes.SimpleNode">
            <summary>
            A simple rectangular shape with one connector.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.#ctor">
            <summary>
            This is the default constructor of the class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.GetThumbnail">
            <summary>
            Overrides the default thumbnail used in the shape viewer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the shape of the person object in the plex. Here you can let your imagination go.
            </summary>
            <param name="g">The graphics canvas onto which to paint</param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.ConnectionPoint(Netron.GraphLib.Connector)">
            <summary>
            Returns a floating-point point coordinates for a given connector
            </summary>
            <param name="c">A connector object</param>
            <returns>A floating-point pointF</returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="T:Netron.GraphLib.BasicShapes.TextLabel">
            <summary>
            A text label shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicShapes.TextLabel.stringAlignment">
            <summary>
            the alignment of the text
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BasicShapes.TextLabel.ShowPage">
            <summary>
            Gets or sets whether the 'page' is drawn. If set to false the shape will appear as a text-only container.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.#ctor">
            <summary>
            This is the default constructor of the class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.GetThumbnail">
            <summary>
            Returns a thumbanil representation of this shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the shape of the person object in the plex. Here you can let your imagination go.
            </summary>
            <param name="g">The graphics canvas onto which to paint</param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.ShapeMenu">
            <summary>
            Changes the default context-menu
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.AddProperties">
            <summary>
            Adds additional properties to the shape
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.SetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Allows the propertygrid to access/set the properties of this shape
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.GetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Allows the propertygrid to access the properties of this shape
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Netron.GraphLib.BezierHandleCollection">
            <summary>
            STC of Bezier handles
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandleCollection.mCurve">
            <summary>
            the curve's painter
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandleCollection.Curve">
            <summary>
            Gets or sets the BezierPainter attached to this handle collection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.#ctor(Netron.GraphLib.BezierPainter)">
            <summary>
            Constructs a collection and assigns the collection to the given curve
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constrcuts a collection on the basis of a PointF collection
            </summary>
            <param name="list">An ArrayList of PointF's</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to the given array, starting at the given position
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.Contains(Netron.GraphLib.BezierHandle)">
            <summary>
            Returns whether the given handle is contained in the collection
            </summary>
            <param name="value">a Bezier handle</param>
            <returns>true if withing the collection, otherwise false</returns>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.CopyTo(Netron.GraphLib.BezierHandle[],System.Int32)">
            <summary>
            Provide the strongly typed member for ICollection
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.IndexOf(Netron.GraphLib.BezierHandle)">
            <summary>
            Returns the index of the given handle
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.Remove(Netron.GraphLib.BezierHandle)">
            <summary>
            Removes and item from the collection
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.Add(Netron.GraphLib.BezierHandle)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.Insert(System.Int32,Netron.GraphLib.BezierHandle)">
            <summary>
            Inserts an item in the collection
            </summary>
            <param name="index"></param>
            <param name="handle"></param>
        </member>
        <member name="P:Netron.GraphLib.BezierHandleCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionCollection">
            <summary>
            STC of connections
            </summary>
        </member>
        <member name="E:Netron.GraphLib.ConnectionCollection.OnConnectionAdded">
            <summary>
            Occurs when a connection is added to the collection
            </summary>
        </member>
        <member name="E:Netron.GraphLib.ConnectionCollection.OnConnectionRemoved">
            <summary>
            Occurs when a connection is removed from the collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionCollection.ar">
            <summary>
            necessary intermediate deserialization array
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor based on an existing array of Connection objects
            </summary>
            <param name="newarray"></param>
        </member>
        <member name="P:Netron.GraphLib.ConnectionCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.Add(Netron.GraphLib.Connection)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.Contains(System.Object)">
            <summary>
            Returns whether the given item is contained in the collection
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.Remove(Netron.GraphLib.Connection)">
            <summary>
            Removes an item from the collection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.Clone">
            <summary>
            Clones the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.RaiseOnConnectionAdded(Netron.GraphLib.Connection,System.Boolean)">
            <summary>
            Raises the OnConnectionAdded event
            </summary>
            <param name="con"></param>
            <param name="manual"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.RaiseOnConnectionRemoved(Netron.GraphLib.Connection,System.Boolean)">
            <summary>
            Raises the OnShapeRemoved event
            </summary>
            <param name="con"></param>
            <param name="manual"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization method
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.OnDeserialization(System.Object)">
            <summary>
            IDeserializationCallback implementation
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Netron.GraphLib.ConnectorCollection">
            <summary>
            Implements a strongly typed collection of connectors
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectorCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectorCollection.Add(Netron.GraphLib.Connector)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectorCollection.AddRange(Netron.GraphLib.ConnectorCollection)">
            <summary>
            Adds a range to the collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:Netron.GraphLib.ConnectorCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectorCollection.Item(System.String)">
            <summary>
            String indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.EntityCollection">
            <summary>
            Collection of entity objects
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="newarray"></param>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Clone">
            <summary>
            Clones the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Add(Netron.GraphLib.Entity)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.AddRange(Netron.GraphLib.ShapeCollection)">
            <summary>
            Adds or merges a collection into this collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.AddRange(Netron.GraphLib.ConnectionCollection)">
            <summary>
            Adds a range of connections to the collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:Netron.GraphLib.EntityCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Contains(System.Object)">
            <summary>
            Returns whether the given item in contained in the collection
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Remove(Netron.GraphLib.Entity)">
            <summary>
            Removes an item from the collection 
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Sort(System.String,Netron.GraphLib.SortDirection)">
            <summary>
            Sorts the collection
            </summary>
            <param name="sortParameter">the property upon which the sorting is based</param>
            <param name="direction">the SortDirection enum of the sorting algorithm</param>
        </member>
        <member name="T:Netron.GraphLib.PointFCollection">
            <summary>
            STC of PointF
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.#ctor(System.Drawing.PointF[])">
            <summary>
            Constructs a collection and assigns the array to the collection
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constrcuts a collection on the basis of a PointF collection
            </summary>
            <param name="list">An ArrayList of PointF's</param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to the given array, starting at the given position
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.Contains(System.Drawing.PointF)">
            <summary>
            Returns whether the given handle is contained in the collection
            </summary>
            <param name="value">a Bezier handle</param>
            <returns>true if withing the collection, otherwise false</returns>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.CopyTo(System.Drawing.PointF[],System.Int32)">
            <summary>
            Provide the strongly typed member for ICollection
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.IndexOf(System.Drawing.PointF)">
            <summary>
            Returns the index of the given handle
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.Remove(System.Drawing.PointF)">
            <summary>
            Removes and item from the collection
            </summary>
            <param name="p">a point to be removed from the collection</param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.Add(System.Drawing.PointF)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="p">the point to be added to the collection</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.Insert(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts an item in the collection
            </summary>
            <param name="index"></param>
            <param name="p"></param>
        </member>
        <member name="P:Netron.GraphLib.PointFCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ShapeCollection">
            <summary>
            Collection of shape objects
            </summary>
            <remarks>
            Note that the naive ISerializable does not work without the IDeserializationCallback interface for some reasons, see http://msdn.microsoft.com/msdnmag/issues/02/07/net/
            </remarks>
        </member>
        <member name="E:Netron.GraphLib.ShapeCollection.OnShapeAdded">
            <summary>
            Occurs when a shape is added to the collection
            </summary>
        </member>
        <member name="E:Netron.GraphLib.ShapeCollection.OnShapeRemoved">
            <summary>
            Occurs when a shape is removed from the collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ShapeCollection.ar">
            <summary>
            necessary intermediate deserialization array
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="newarray"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.ToList">
            <summary>
            Returns the collection as a list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Sort(System.String,Netron.GraphLib.SortDirection)">
            <summary>
            Sorts the collection
            </summary>
            <param name="sortParameter">the property upon which the sorting is based</param>
            <param name="direction">the SortDirection enum of the sorting algorithm</param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.RaiseOnShapeAdded(Netron.GraphLib.Shape)">
            <summary>
            Raises the OnShapeAdded event
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.RaiseOnShapeRemoved(Netron.GraphLib.Shape)">
            <summary>
            Raises the OnShapeRemoved event
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization method
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.OnDeserialization(System.Object)">
            <summary>
            IDeserializationCallback implementation, necessary to have ISerializable work on CollectionBase inherited class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Clone">
            <summary>
            Clones the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Add(Netron.GraphLib.Shape)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.ShapeCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Contains(System.Object)">
            <summary>
            Returns whether the given item in contained in the collection
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Remove(Netron.GraphLib.Shape)">
            <summary>
            Removes an item from the collection 
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Netron.GraphLib.StringCollection">
            <summary>
            STC of strings
            </summary>
        </member>
        <member name="M:Netron.GraphLib.StringCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.StringCollection.Add(System.String)">
            <summary>
            Adds a string to the collection
            </summary>
            <param name="value">a string</param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.StringCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.StringCollection.Contains(System.String)">
            <summary>
            Returns whether the given string is in the collection
            </summary>
            <param name="value">a string</param>
            <returns>Returns the index in the collection if found, otherwise -1.</returns>
        </member>
        <member name="T:Netron.GraphLib.WidgetCollection">
            <summary>
            STC of IWidget objects
            </summary>
        </member>
        <member name="M:Netron.GraphLib.WidgetCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.WidgetCollection.Add(Netron.GraphLib.Interfaces.IWidget)">
            <summary>
            Adds a widget to the collection
            </summary>
            <param name="widget"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.WidgetCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.ConnectionSummary">
            <summary>
            Encapsulates the essential information of a custom connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ConnectionSummary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ConnectionSummary.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="name"></param>
            <param name="key"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="T:Netron.GraphLib.Configuration.ConnectionSummaryCollection">
            <summary>
            实现连接摘要的强类型集合
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ConnectionSummaryCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ConnectionSummaryCollection.Add(Netron.GraphLib.Configuration.ConnectionSummary)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="summary"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Configuration.ConnectionSummaryCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.GraphLibConfigurationHandler">
            <summary>
            Reads the custom configuration section by implementing the 
            IConfigurationSectionHandler interface.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphLibConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Returns an  ArrayList object with all the paths		
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Configuration.GraphObjectsLibrary">
            <summary>
            Collects shape and lib info of an assembly containing custom shapes and/or connections
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.GraphObjectsLibrary.mPath">
            <summary>
            the path to the lib
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.GraphObjectsLibrary.shapeSummmaries">
            <summary>
            the summary collection for the custom shapes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.GraphObjectsLibrary.conSummaries">
            <summary>
            the summary collection for the custom connections
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibrary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibrary.#ctor(System.String)">
            <summary>
            Constructor with the library-path
            </summary>
            <param name="libPath"></param>
        </member>
        <member name="P:Netron.GraphLib.Configuration.GraphObjectsLibrary.Path">
            <summary>
            Gets or sets the mPath of the library
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.GraphObjectsLibrary.ShapeSummaries">
            <summary>
            获取或设置形状摘要
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.GraphObjectsLibrary.ConnectionSummaries">
            <summary>
            Gets or sets the connection summaries
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection">
            <library>
            Strongly typed collection of shape libraries
            </library>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.Add(Netron.GraphLib.Configuration.GraphObjectsLibrary)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="library"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.GetShapeSummary(System.String)">
            <summary>
            Returns the summary for a shape with the given key
            </summary>
            <param name="shapeKey"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.GetConnectionSummary(System.String)">
            <summary>
            Returns the summary for the connection with the given key
            </summary>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Configuration.ShapeSummary">
            <summary>
            Collects info about a shape from the class attributes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.ShapeSummary.mShapeCategory">
            <summary>
            the shape's category
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.ShapeSummary.ShapeCategory">
            <summary>
            Gets or sets the shape's category
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.ShapeSummary.IsInternal">
            <summary>
            Gets or sets whether the shape is only for internal use (creation can only occur by code)
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeName"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummary.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeName"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
            <param name="mDescription"></param>
        </member>
        <member name="T:Netron.GraphLib.Configuration.ShapeSummaryCollection">
            <summary>
            Implements a strongly typed collection of shape summaries
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummaryCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummaryCollection.Add(Netron.GraphLib.Configuration.ShapeSummary)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="summary"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Configuration.ShapeSummaryCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.Summary">
            <summary>
            Summarizes the essential elements to reflect a graph element
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mDescription">
            <summary>
            the description
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mReflectionName">
            <summary>
            the fully qualified name to reflect the object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mKey">
            <summary>
            the unique key of the object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mName">
            <summary>
            the name of the object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mLibPath">
            <summary>
            the name of the dll where the lib is to be found
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.LibPath">
            <summary>
            Gets or sets the library path
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.Key">
            <summary>
            Gets or sets the key of the summary
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.Name">
            <summary>
            Gets or sets the name of the library
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.Description">
            <summary>
            Gets or sets the summary
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.ReflectionName">
            <summary>
            Gets or sets the fully qualified namespace to reflect
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.Summary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.Summary.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="name"></param>
            <param name="key"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="M:Netron.GraphLib.Configuration.Summary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="name"></param>
            <param name="key"></param>
            <param name="reflectionName"></param>
            <param name="description"></param>
        </member>
        <member name="T:Netron.GraphLib.Connection">
            <summary>
            The connection class captures a connection between two connectors and is derived from an entity.
            连接类捕获两个连接器之间的连接，并从实体派生。
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mInsertionPoints">
            <summary>
            Holds the polyline data
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineWidth">
            <summary>
            default line width
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mRestLength">
            <summary>
            default rest length of the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mToPoint">
            <summary>
            This is a public floating point assigned by the canvascontrol in the MouseMove and 
            MouseDown events. It makes it possible mTo show a drawn line before there is an actual link between
            two connectors.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mFrom">
            <summary>
            The starting connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mTo">
            <summary>
            the destination connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineColor">
            <summary>
            The line color
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineStyle">
            <summary>
            The line style (Solid, Dashed...)
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineWeight">
            <summary>
            The line weight; thin, medium or fat. Could be set mTo arbitrary size.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineEnd">
            <summary>
            The type of arrow or line end
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLinePath">
            <summary>
            the shape of the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mPainter">
            <summary>
            the painter class used to paint the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mTracker">
            <summary>
            Tracker used for the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mZOrder">
            <summary>
            the z-order of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.ZOrder">
            <summary>
            Gets or sets the z-order of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.ConnectionPainter">
            <summary>
            Gets the connection painter
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.InsertionPoints">
            <summary>
            Gets or sets the additional set of points along the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.Font">
            <summary>
            Gets or sets the font to be used for drawing text
            
            </summary>
            <remarks>Redefines the Font property of the Entity class as public <see cref="T:Netron.GraphLib.Entity"/></remarks>
        </member>
        <member name="P:Netron.GraphLib.Connection.BoxedLabel">
            <summary>
            Gets or sets whether the label is shown as a tooltip
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.SetLayer(Netron.GraphLib.GraphLayer)">
            <summary>
            Puts the connection in a layer
            </summary>
            <param name="layer"></param>
        </member>
        <member name="P:Netron.GraphLib.Connection.Painter">
            <summary>
            Gets the ConnectionPainter object for this connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.IsSelected">
            <summary>
            Gets or sets whether the connection is selected
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.Tracker">
            <summary>
            Gets or set the tracker associated with the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LinePath">
            <summary>
            Gets or sets the type of connection or shape of the path.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.RestLength">
            <summary>
            Gets or sets the rest length of the connection (used by the layour algorithms)
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.Length">
            <summary>
            Returns the length of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.ConnectionSize">
            <summary>
            Gets the rectangle corresponding mTo or embedding the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LineStyle">
            <summary>
            Gets or sets the line style
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LineEnd">
            <summary>
            Gets or sets the line end
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.ToPoint">
            <summary>
            Gets or sets the temporary To point when drawing and connecting mTo a To connector.
            Holds normally the mouse coordinate.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LineColor">
            <summary>
            Gets or sets the line color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LineWeight">
            <summary>
            Gets or sets the line weight
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.From">
            <summary>
            Gets or sets where the connection originates
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.To">
            <summary>
            Gets or sets where the connection ends
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.#ctor">
            <summary>
            Default constructor, assigns null connectors and so a null connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PostDeserialization">
            <summary>
            Additional actions after deserialization
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.AddConnectionPoint(System.Drawing.PointF)">
            <summary>
            Adds an intermediate connection point to the connection
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.RemoveConnectionPoint(System.Drawing.PointF)">
            <summary>
            Removes a connection point from the connection
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.InitConnection">
            <summary>
            Common constructors initialization
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.Hit(System.Drawing.RectangleF)">
            <summary>
            Returns wether or not the given rectangle is contained in the object
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Connection.GetConnectionPoints">
            <summary>
            Returns the points of the connection
            </summary>
            <returns>An array of PointF structs</returns>
        </member>
        <member name="M:Netron.GraphLib.Connection.Paint(System.Drawing.Graphics)">
            <summary>
            The painting of the connection
            </summary>
            <param name="g">The graphics object</param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintLabel(System.Drawing.Graphics)">
            <summary>
            Paints the label
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintTrack(System.Drawing.Graphics)">
            <summary>
            Paints the tracker object
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintPolyLine(System.Drawing.Graphics)">
            <summary>
            Draws a line between the To and From connectors
            </summary>
            <param name="g">The graphics</param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintArrow(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Paints an arrow
            </summary>
            <param name="g"></param>
            <param name="tip"></param>
            <param name="left"></param>
            <param name="right"></param>
            <param name="filled"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintArrow(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Paints an arrow
            </summary>
            <param name="endPoint"></param>
            <param name="filled"></param>
            <param name="g"></param>
            <param name="lineColor"></param>
            <param name="showLabel"></param>
            <param name="startPoint"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.Invalidate">
            <summary>
            Overrides the invalidate (refresh)
            </summary>
            <remarks>
            Note the smart way to invalidate the region arround the start and end points
            by inflating the endpoints and then to make a union rectangle
            </remarks>
        </member>
        <member name="M:Netron.GraphLib.Connection.Insert(Netron.GraphLib.Connector,Netron.GraphLib.Connector)">
            <summary>
            Adds a connection on the basis of two connectors
            </summary>
            <param name="f">The start connector</param>
            <param name="t">The end connector</param>
        </member>
        <member name="M:Netron.GraphLib.Connection.Delete">
            <summary>
            Deletes the current connection and removes it also mFrom the list in the
            From and/or To connectors.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.GetCursor(System.Drawing.PointF)">
            <summary>
            For the given point p it gets the appropriate cursor.
            </summary>
            <param name="p"> The floating-point point</param>
            <returns>A cursor.</returns>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintAdornments(System.Drawing.Graphics)">
            <summary>
            Paints the adornments (nothing currently)
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.Transmit">
            <summary>
            Overridable Transmit method that hands over values mFrom the Sender mTo the Receiver.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.AddProperties">
            <summary>
            Adds property grid accessible properties mTo the connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.GetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Gets the value of the requested property
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.SetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Sets the value of the given property
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="T:Netron.GraphLib.ConnectionPainter">
            <summary>
            Abstract base class to paint a connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mConnection">
            <summary>
            the underlying connection of this painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mPen">
            <summary>
            the pen to draw with
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mSelected">
            <summary>
            whether the connection is selected
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mIsHovered">
            <summary>
            whether the connection is hovered
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mPoints">
            <summary>
            the set of points to use when drawing
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Creates a connection painter based on the given connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.Connection">
            <summary>
            Gets or sets the connection this painter paints
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.Points">
            <summary>
            Gets or sets the points upon which the painting of this connection painter is based
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.IsHovered">
            <summary>
            Gets or sets whether the mouse is hovering over this object
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.Selected">
            <summary>
            Gets or sets whether the connection is selected
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.Pen">
            <summary>
            Gets or sets the pen used by the painter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.PostDeserialization">
            <summary>
            Post-deserialization actions
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.AddConnectionPoint(System.Drawing.PointF)">
            <summary>
            Handles the addition of a new (intermediate) connection point
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.RemoveConnectionPoint(System.Drawing.PointF)">
            <summary>
            Handles the removal of an (intermediate) connection point
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the connection on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.Hit(System.Drawing.PointF)">
            <summary>
            Returns true if the given point hit the connection
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializator
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Netron.GraphLib.BezierEntity">
            <summary>
            Abstract base class related to the Bezier connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierEntity.mTracking">
            <summary>
            whether tracking is on
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierEntity.mCurrentPoint">
            <summary>
            the current point
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierEntity.mRectangle">
            <summary>
            the rectangle underlying the entity
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierEntity.mHovered">
            <summary>
            whether hovered by the mouse
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierEntity.Rectangle">
            <summary>
            Gets or sets the underlying rectangle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierEntity.Hovered">
            <summary>
            Gets or sets whether the mouse is hovering this entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierEntity.Tracking">
            <summary>
            Gets or sets whether the tracking is on
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierEntity.CurrentPoint">
            <summary>
            Gets or sets the current point of this entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the entity is hit by the mouse at the given location
            </summary>
            <param name="p">a point</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the entity on the canvas
            </summary>
            <param name="g">the graphics object to paint on</param>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.ChangeLocation(System.Drawing.PointF)">
            <summary>
            Changes the location of the entity to the given point
            </summary>
            <param name="p">a point</param>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Netron.GraphLib.BezierHandle">
            <summary>
            A handle with which the connection can be manipulated
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mHandleType">
            <summary>
            handle type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mTangent1">
            <summary>
            first handle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mTangent2">
            <summary>
            second handle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.pen">
            <summary>
            the pen to draw lines
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mCurve">
            <summary>
            the Bezier painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mVerticalConstraint">
            <summary>
            whether the handle's shifts should be constrained to the vertical only
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.Curve">
            <summary>
            Gets or sets the curve to which this handle belongs
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.HandleType">
            <summary>
            Gets or sets the handle type
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.Tangent1">
            <summary>
            Gets or sets the first tangent
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.Tangent2">
            <summary>
            Gets or sets the second tangent
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.VerticalConstraint">
             <summary>
             Gets or sets whether the change should be constrained
             </summary>
             <remarks>This property is not used in the graph library and is useful if you use
            the Bezier stuff in a chart or similar 
            </remarks>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x">the x-coordinate of the handle</param>
            <param name="y">the y-coordinate of the handle</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Single,System.Single,Netron.GraphLib.HandleTypes)">
            <summary>
            Constructor
            </summary>
            <param name="x">the x-coordinate of the handle</param>
            <param name="y">the y-coordinate of the handle</param>
            <param name="type">the handle type</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Drawing.PointF)">
            <summary>
            Constructor
            </summary>
            <param name="p">a point</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Drawing.PointF,Netron.GraphLib.HandleTypes)">
            <summary>
            Constructor
            </summary>
            <param name="p">a point</param>
            <param name="type">the handle type</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.Init">
            <summary>
            Initializes the handle
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the mouse hit this handle
            </summary>
            <param name="p">a point</param>
            <returns>returns whether the given point hit the handle</returns>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.ChangeLocation(System.Drawing.PointF)">
            <summary>
            Changes the location of the handle to the given point
            </summary>
            <param name="p">the new location of the handle</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the handle
            </summary>
            <param name="g">the graphics objects to paint on</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.Dispose">
            <summary>
            Disposes the graphics object
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializator
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Netron.GraphLib.BezierPainter">
            <summary>
            A Bezier curve painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierPainter.division">
            <summary>
            the subdivision
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierPainter.mStepsCount">
            <summary>
            the intermediate steps count
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierPainter.mHandles">
            <summary>
            the collection of handles
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierPainter.mTracking">
            <summary>
            whether tracking is on
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.Tracking">
            <summary>
            Gets or sets whether tracking is on
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.From">
            <summary>
            Gets or sets where the painter starts
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.To">
            <summary>
            Gets or sets where the painter ends
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.Handles">
            <summary>
            Gets or sets the collection of handles
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.Points">
            <summary>
            Overrides the default since this Bezier thing is based on handles rather than simple points
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Constructor
            </summary>
            <param name="connection">the connection this painter is painting</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.AddConnectionPoint(System.Drawing.PointF)">
            <summary>
            Adds an intermediate connection point
            </summary>
            <param name="p">the location of the additional connection-point</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.RemoveConnectionPoint(System.Drawing.PointF)">
            <summary>
            Removes a connection point
            </summary>
            <param name="p">the location of the connection-point to be removed</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.RemoveHandle(Netron.GraphLib.BezierHandle)">
            <summary>
            Removes an handle
            </summary>
            <param name="handle">the handle to be removed</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.Init">
            <summary>
            Initalizes the painter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.PostDeserialization">
            <summary>
            Post deserialization actions
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the entity on the canvas
            </summary>
            <param name="g">the graphics object to paint on</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.B1(System.Single)">
            <summary>
            the B1 coefficient
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.B2(System.Single)">
            <summary>
            the B2 coefficient
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.B3(System.Single)">
            <summary>
            the B3 coefficient
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.B4(System.Single)">
            <summary>
            the B4 coefficient
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.GetBezier(System.Single,Netron.GraphLib.BezierHandle,Netron.GraphLib.BezierHandle)">
            <summary>
            Gets for the given sub-elemts of the Bezier curve an intermediate point
            </summary>
            <param name="percent">the percentage along the curve</param>
            <param name="handle1">the first handle of the segment</param>
            <param name="handle2">the second handle of the segment</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.GetBezier(System.Single,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets an intermediate point of the Bezier curve
            </summary>
            <param name="percent">the percentage along the curve</param>
            <param name="C1">the C1 point</param>
            <param name="C2">the C2 point</param>
            <param name="C3">the C3 point</param>
            <param name="C4">the C4 point</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the Bezier curve is hit by the mouse
            </summary>
            <param name="p">a point</param>
            <returns>whether the given point hits the connection</returns>
            <remarks>The curve is really a collection of segments, hence the hit is a linear combination of the basic linear Hit.</remarks>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializator
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Netron.GraphLib.BezierTracker">
            <summary>
            Tracker for Bezier connection.
            This tracker consists of the tangential handles and the handles on the curve itself
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierTracker.mCurve">
            <summary>
            the painter attached to the curve
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierTracker.mHandles">
            <summary>
            the collection of handles
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierTracker.Curve">
            <summary>
            Gets or sets the underlying Bezier curve
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierTracker.Handles">
            <summary>
            Gets the handle collection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.#ctor(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="l"></param>
            <param name="resizable"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.#ctor(Netron.GraphLib.BezierPainter)">
            <summary>
            Constructor
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Constructor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the tracker on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the tracker is hit by the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.Start(System.Drawing.PointF,System.Drawing.Point)">
            <summary>
            Start the tracking
            </summary>
            <param name="p"></param>
            <param name="h"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.Move(System.Drawing.PointF,System.Drawing.Size,System.Boolean,System.Int32)">
            <summary>
            Moves the tracker to another location
            </summary>
            <param name="p"></param>
            <param name="maxSize"></param>
            <param name="snap"></param>
            <param name="snapSize"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.MoveAll(System.Drawing.PointF)">
            <summary>
            Moves the whole connnection (including the handles)
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:Netron.GraphLib.TangentHandle">
            <summary>
            This is the tangential manipulator that allows you to change the curvature or bending of the Bezier curve at the handles
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TangentHandle.pen">
            <summary>
            the pen to draw the mHandle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TangentHandle.mHandle">
            <summary>
            the mHandle to which this tangent-mHandle belongs
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TangentHandle.mCotangent">
            <summary>
            the cotangent
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TangentHandle.mEnabled">
            <summary>
            whether this mHandle is enabled
            </summary>
        </member>
        <member name="P:Netron.GraphLib.TangentHandle.Enabled">
            <summary>
            Gets or sets whether the mHandle is enabled
            </summary>
        </member>
        <member name="P:Netron.GraphLib.TangentHandle.Cotangent">
            <summary>
            Gets or sets the cotangent
            </summary>
        </member>
        <member name="P:Netron.GraphLib.TangentHandle.Handle">
            <summary>
            Gets or sets the handle to which this tangent belongs
            </summary>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.#ctor(Netron.GraphLib.BezierHandle,System.Drawing.PointF)">
            <summary>
            Constructor
            </summary>
            <param name="mHandle"></param>
            <param name="point"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the mHandle
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.ChangeLocation(System.Drawing.PointF)">
            <summary>
            Changes the location of the mHandle to the given point
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.ChangeCotangent(System.Drawing.PointF)">
            <summary>
            Changes the location of the cotangent
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether this object was hit by the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializator
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Netron.GraphLib.DefaultPainter">
            <summary>
            The default connection painter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.DefaultPainter.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Default constructor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.DefaultPainter.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the default connection is hit by the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.DefaultPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the connection on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:Netron.GraphLib.RectangularPainter">
            <summary>
            The rectangular connection painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.RectangularPainter.s">
            <summary>
            start and end of the painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.RectangularPainter.e">
            <summary>
            start and end of the painter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.RectangularPainter.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Constructor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.RectangularPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the connection on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.RectangularPainter.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the connection is hit by the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.ConnectionTracker">
            <summary>
            Tracker for connection objects.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor for a connection tracker with a list of connection segment points for the handles
            </summary>
            <param name="l">list of points for the handles</param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.#ctor(System.Drawing.PointF[])">
            <summary>
            Constructor
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.#ctor(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Constructor for a connection tracker with a list of connection segment points for 
            the handles and a resize state.
            </summary>
            <param name="l">list of points for the handles</param>
            <param name="resizable">Resize state.</param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Start(System.Drawing.PointF,System.Drawing.Point)">
            <summary>
            Starts tracking.
            </summary>
            <param name="p">Current mouse location</param>
            <param name="h">Handle</param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Hit(System.Drawing.PointF)">
            <summary>
            Performs a hit check.
            </summary>
            <param name="p">Current mouse location</param>
            <returns>Grip</returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Cursor(System.Drawing.PointF)">
            <summary>
            Returns cursor to a point
            </summary>
            <param name="p">Current mouse location</param>
            <returns>Cursor</returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Move(System.Drawing.PointF,System.Drawing.Size,System.Boolean,System.Int32)">
            <summary>
            Moves the tracking rectangle
            </summary>
            <param name="p">Current mouse location</param>
            <param name="maxSize"></param>
            <param name="snap"></param>
            <param name="snapSize"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.MoveAll(System.Drawing.PointF)">
            <summary>
            Moves the tracking rectangle
            </summary>
            <param name="p">Current mouse location</param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the tracker.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Grip(System.Drawing.Point)">
            <summary>
            Gets the grip rectangle
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Connector">
            连接器，也称为“连接点”，是形状上的一个点，线（连接）将附着在该点上。
            当光标在附近时亮起，并且可以包含可以通过连接传播的输入/输出数据。
            <备注>
            你可以做的事情：
            <br>-使连接器在被击中时闪烁</br>
            <br>-悬停时显示一个广泛的信息框</br>
            <br>-悬停时附加状态消息</br>
            <br>-区分不同连接器的传播类型或parnet/子关系</br>
            </备注>
        </member>
        <member name="F:Netron.GraphLib.Connector.mConnectionShift">
            <summary>
            gives a little displacement between the connection and the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mConnectorLocation">
            <summary>
            determines the place of the connection shift
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mAdjacentPoint">
            <summary>
            the shift point
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mAllowMultipleConnections">
            <summary>
            only 1 connection allowed if false
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mBelongsTo">
            <summary>
            object this connector belongs to.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mConnections">
            <summary>
            connections attached to this connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mSendList">
            <summary>
            collection of objects that the connector propagates
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mReceiveList">
            <summary>
            collection of values/objects that the connector receives from other connectors
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mName">
            <summary>
            name of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mAllowNewConnectionsFrom">
            <summary>
            allow new connections to be launched from this connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mAllowNewConnectionsTo">
            <summary>
            allow new connection to be attached to this connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.AllowNewConnectionsFrom">
            <summary>
            Gets or sets whether to allow new connections to be launched from this connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.AllowNewConnectionsTo">
            <summary>
            Gets or sets whether to allow new connections to be attached to this connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.Name">
            <summary>
            Gets or sets the name of the connector.
            
            </summary>
            <remarks>
            This property makes it possible to deserialize a connector, it's the only way to find back where a 
            serialized connector came from.
            </remarks>
        </member>
        <member name="P:Netron.GraphLib.Connector.ConnectionShift">
            <summary>
            Gets or sets the connection shift with respect to this connector.
            If the type is 'Omni' it's an offset in the direction of the connection,
            otherwise it creates a little shift/break in the connection in the direction specified by the
            ConnectorLocation.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.Location">
            <summary>
            The location of the connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.AllowMultipleConnections">
            <summary>
            Gets or sets whether the connector can have multiple connection attached
            </summary>	
        </member>
        <member name="P:Netron.GraphLib.Connector.Connections">
            <summary>
            Gets the connections of a connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.Sends">
            <summary>
            The values/objects that the connector propagates
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.Receives">
            <summary>
            The values/objects that the connectors receives from other connectors
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.BelongsTo">
            <summary>
            获取/设置此连接器所连接的ShapeObjects
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.AdjacentPoint">
            <summary>
            Gets or sets the adjacent point which allows to have a little distance between shapes and connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.ConnectorLocation">
            <summary>
            Gets or sets the location of the connector which will determine where the adjacent point will be
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connector.#ctor(Netron.GraphLib.Shape,System.String,System.Boolean)">
            <summary>
            Constructor of the connector clss
            </summary>
            <param name="o">the underlying shape to which the connector belongs</param>
            <param name="connectorName">the name of the connector</param>
            <param name="multipleConnections">whether the connector allows multiple connections to be added or connected to it</param>		
        </member>
        <member name="M:Netron.GraphLib.Connector.#ctor(System.String)">
            <summary>
            Internal constructor, related to deserialization
            </summary>
            <param name="uid"></param>
        </member>
        <member name="M:Netron.GraphLib.Connector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.Connector.PaintAdornments(System.Drawing.Graphics)">
            <summary>
            Implements the abstract method of the Entity class
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Connector.Hit(System.Drawing.RectangleF)">
            <summary>
            Says wether the given RectangleF is contained inside this connector
            </summary>
            <param name="r">the RectangleF as a candidate, usually the mouse coordinates converted to a zero sized rectangle.</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Netron.GraphLib.Connector.Paint(System.Drawing.Graphics)">
            <summary>
            Overrides the Paint of the control and paint a little connection point or a highlighted connecting widget to 
            show the user that a connection is possible.
            </summary>
            <remarks>
            The parent's Hover boolean can be used to check if the mouse is currently hovering over this object. This enables a status message or a different shape.
            </remarks>
            <param name="g">The Graphics or canvas onto which to paint.</param>
        </member>
        <member name="M:Netron.GraphLib.Connector.Delete">
            <summary>
            Necessary implementation of the abstract delete method defined in Entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connector.Invalidate">
            <summary>
            Update/refresh the connector's appearance
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connector.GetCursor(System.Drawing.PointF)">
            <summary>
            Returns the cursor for the current connector
            </summary>
            <param name="p">The cursor location</param>
            <returns>A grip cursor, looks like a focus/target</returns>
        </member>
        <member name="M:Netron.GraphLib.Connector.ConnectionGrip">
            <summary>
            Represents the spot around a connector that lits up and where the connections is attaching itself
            The color is determined by various things, can be red, grey or green. See the Hover conditions in the paint handler for this.
            </summary>
            <returns>A little rectangleF (3x3)</returns>
        </member>
        <member name="M:Netron.GraphLib.Connector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="T:Netron.GraphLib.ConnectionEventArgs">
            <summary>
            Provides data for the new connection event
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEventArgs.to">
            <summary>
            the end of the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEventArgs.from">
            <summary>
            the start of the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEventArgs.connection">
            <summary>
            the connection under consideration
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEventArgs.manual">
            <summary>
            whether it was added via the mouse
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionEventArgs.Manual">
            <summary>
            Gets whether the new connection was created manually, i.e. via user interaction.
            If false it means that the connection was created programmatically.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionEventArgs.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Initializes a new instance of the ConnectionEventArgs class.
            </summary>			
        </member>
        <member name="M:Netron.GraphLib.ConnectionEventArgs.#ctor(Netron.GraphLib.Connection,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="connection"></param>
            <param name="manual"></param>
        </member>
        <member name="P:Netron.GraphLib.ConnectionEventArgs.Connection">
            <summary>
            Gets the newly created connection
            </summary> 
        </member>
        <member name="P:Netron.GraphLib.ConnectionEventArgs.To">
            <summary>
            Gets the 'to' connector of the connection
            </summary> 
        </member>
        <member name="P:Netron.GraphLib.ConnectionEventArgs.From">
            <summary>
            Gets the 'from' connector of the connection
            </summary> 
        </member>
        <member name="T:Netron.GraphLib.PropertiesInfo">
            <summary>
            The signature of a show-properties event
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ItemDescription">
            <summary>
            The signature of the show-description-on-hover event
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionInfo">
            <summary>
            when a new connection is added event 
            </summary>
        </member>
        <member name="T:Netron.GraphLib.InfoDelegate">
            <summary>
            The general purpose output delegate 
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ShapeInfo">
            <summary>
            when a new shape is added
            </summary>
        </member>
        <member name="T:Netron.GraphLib.FileInfo">
            <summary>
            File information delegate
            </summary>
        </member>
        <member name="T:Netron.GraphLib.InfoEventArgs">
            <summary>
            Event argument to pass generic string information
            </summary>
        </member>
        <member name="F:Netron.GraphLib.InfoEventArgs.mMessage">
            <summary>
            the message
            </summary>
        </member>
        <member name="P:Netron.GraphLib.InfoEventArgs.Message">
            <summary>
            Gets or sets the info message
            </summary>
        </member>
        <member name="M:Netron.GraphLib.InfoEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Netron.GraphLib.PropertySpecEventHandler">
            <summary>
            Represents the method that will handle the GetValue and SetValue events of the
            PropertyBag class.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Entity">
            <summary>
            Abstract base class for everything that participates in the diagram/graph (connection, connector...)	
            关系图/图中所有内容的抽象基类（连接、连接器…）
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity._NodeStepPropertyValue">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.NodeStepPropertyValue">
            <summary>
            用于保存所有属性的集合，这个属性是业务性属性，是每个节点，或条件的内容值
            </summary>
        </member>
        <member name="E:Netron.GraphLib.Entity.OnMouseDown">
            <summary>
            Occurs when the mouse is pressed on this entity
            </summary>
        </member>
        <member name="E:Netron.GraphLib.Entity.OnMouseUp">
            <summary>
            Occurs when the mouse is released while above this entity
            </summary>
        </member>
        <member name="E:Netron.GraphLib.Entity.OnMouseMove">
            <summary>
            Occurs when the mouse is moved while above this entity
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mLayer">
            <summary>
            the layer to which the entity belongs,
            the default layer is a static unique layer defined in the GraphAbstract.		
            </summary>		
        </member>
        <member name="F:Netron.GraphLib.Entity.mTag">
            <summary>
            volatile all-purpose tag
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mRecalculateSize">
            <summary>
            whether to recalculate the shape size, speed up the rendering
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mBag">
            <summary>
            the property bag
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mBluePen">
            <summary>
            default blue mPen, speeds up rendering
            Note that the Pen is not serialzable!
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mBlackPen">
            <summary>
            default black mPen, speeds up rendering
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mPenWidth">
            <summary>
            the mPen's width
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mPen">
            <summary>
            default mPen
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mIsGuiReset">
            <summary>
            whether the entity is reset
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mFontFamily">
            <summary>
            the font family
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mIsSelected">
            <summary>
            whether the entity is selected
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mIsHovered">
            <summary>
            whether this entity is being hovered
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mUID">
            <summary>
            the unique identitfier
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mText">
            <summary>
            mText or label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mShowLabel">
            <summary>
            whether to show the mText label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mTextColor">
            <summary>
            the default mText color
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mFontSize">
            <summary>
            the default font size in points
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mFont">
            <summary>
            the default font for entities
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mSite">
            <summary>
            the mSite of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Pen">
            <summary>
            Gets or sets the pen-object to paint and draw
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Bag">
            <summary>
            Gets the property-bag
            </summary>
            <remarks>The bag acts as a proxy-object for the properties and his part of the propertybag mechanism.</remarks>
        </member>
        <member name="P:Netron.GraphLib.Entity.RecalculateSize">
            <summary>
            Gets or sets whether the next painting roun will have to recalculate the size of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.BlackPen">
            <summary>
            Gets the default black mPen for drawing text and lines
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.FontFamily">
            <summary>
            Gets or sets the font-family used by derived class to draw and paint on the canvas
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Layer">
            <summary>
            Gets the layer ths shape is on. If null, the shape is in the default layer.
            </summary>
            <remarks>User the SetLayer() method to set or change the layer.
            </remarks>
        </member>
        <member name="P:Netron.GraphLib.Entity.Tag">
            <summary>
            Gets or sets a general purpose tag object
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.PenWidth">
            <summary>
            Gets or sets the mPen width
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.ShowLabel">
            <summary>
            Gets or sets whether the shape label should be shown.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Properties">
            <summary>
            Allows to view/change the properties of the shape, most probably on double-clicking it.
            </summary>			
        </member>
        <member name="P:Netron.GraphLib.Entity.Text">
            <summary>
            Gets or sets the entity label
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Site">
            <summary>
            Gets or sets the mSite of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.IsSelected">
            <summary>
            Tells wether the entity (shape) is selected
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.IsGuiReset">
            <summary>
            Gets or sets whether the entity's UID is reset
            </summary>
            <remarks>USed in the cotext of copy/paste</remarks>
        </member>
        <member name="P:Netron.GraphLib.Entity.IsHovered">
            <summary>
            Gives true if the mouse is hovering over this entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.TextColor">
            <summary>
            Gets or sets the mText color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.FontSize">
            <summary>
            Gets or sets the font size of the mText
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Font">
            <summary>
            Gets or sets the font to be used when drawing text-data
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.UID">
            <summary>
            Gets or sets the unique identifier for the shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Summary">
            <summary>
            Gets the Summary for this entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Tracker">
            <summary>
            Gets the tracker of the entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.#ctor">
            <summary>
            Constructor for the entity class, initializes a new GUID for the entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Creates a new entity, specifying the mSite 
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.Dispose">
            <summary>
            IDispose implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.SetLayer(Netron.GraphLib.GraphLayer)">
            <summary>
            Sets the layer the entity belongs to
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.SetLayer(System.String)">
            <summary>
            Sets the shape in a layer.
            Use "default" to set the shape in the default layer.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.SetLayer(System.Int32)">
            <summary>
            Sets the shape in a layer.
            Layer 0 is the default layer.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.GetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Determines which properties are accessible via the property grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.SetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Sets the values passed by the property grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.AddProperties">
            <summary>
            When overriden, allows user defined entities to get custom properties
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.InitEntity">
            <summary>
            Initializes the class. This method is necessary when deserializing since various elements like
            the Pen cannot be serialized to file and have to be, hence, set after deserialization.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.Paint(System.Drawing.Graphics)">
            <summary>
            creates the actual visual element on screen
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.GetCursor(System.Drawing.PointF)">
            <summary>
            Gets the cursor for the current position of the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Entity.Delete">
            <summary>
            GraphAbstract delete method; deletes the entity from the plex
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.Hit(System.Drawing.RectangleF)">
            <summary>
            Says wether, for the given rectangle, the underlying shape is contained in it.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Entity.Invalidate">
            <summary>
            Invalidating refreshes part or all of a control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.PaintAdornments(System.Drawing.Graphics)">
            <summary>
            Allows to paints additional things like the clickable elements on shapes
            independently of the shape's design
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.PaintTracker(System.Drawing.Graphics)">
            <summary>
            Paints the tracker of the entity
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.GenerateNewUID">
            <summary>
            Regenerates a GUID for this entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.RaiseMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse down event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.RaiseMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse up event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="M:Netron.GraphLib.Entity.PostDeserialization">
            <summary>
            Post-deserialization actions
            </summary>
        </member>
        <member name="T:Netron.GraphLib.AutomataDataType">
            <summary>
            The automata data types
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Integer">
            <summary>
            Corresponds to .Net's Int32 data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Double">
            <summary>
            Corresponds to .Net's double data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Color">
            <summary>
            Corresponds to .Net's System.Drawing.Color data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Vector">
            <summary>
            A 2D floating vector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Degree">
            <summary>
            An integer between 0 and 360
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Radians">
            <summary>
            A floating point number interpreted as an angle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.String">
            <summary>
            Corresponds to .Net's String data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Bool">
            <summary>
            Corresponds to .Net's Boolean data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Object">
            <summary>
            Corresponds to .Net's Object data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.DateTime">
            <summary>
            Corresponds to .Net's datetime data type
            </summary>
        </member>
        <member name="T:Netron.GraphLib.VisualizationTypes">
            <summary>
            Enumerates the different visualization types
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Chernoff">
            <summary>
            Chernoff faces; a parametrized facial expression giving for a constraint set
            of values a very picturial representation
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Color">
            <summary>
            Using colors
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Value">
            <summary>
            The actual values
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Pie">
            <summary>
            A pie-chart
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Gauge">
            <summary>
            A gauge representation
            </summary>
        </member>
        <member name="T:Netron.GraphLib.AutomataInitialState">
            <summary>
            Enumerates the possible initial states of the automata
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.SingleDot">
            <summary>
            A single dot in the middle of the range
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.Alternate">
            <summary>
            An alternating black-and-white pattern
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.Black">
            <summary>
            All cells black
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.White">
            <summary>
            All cells white
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.External">
            <summary>
            Custom definition of a pattern
            </summary>
        </member>
        <member name="T:Netron.GraphLib.CanvasBackgroundType">
            <summary>
            The types of backgrounds the control can have
            </summary>
        </member>
        <member name="F:Netron.GraphLib.CanvasBackgroundType.FlatColor">
            <summary>
            Uniform flat colored
            </summary>
        </member>
        <member name="F:Netron.GraphLib.CanvasBackgroundType.Gradient">
            <summary>
            Two-color gradient
            </summary>
        </member>
        <member name="F:Netron.GraphLib.CanvasBackgroundType.Image">
            <summary>
            A user defined image
            </summary>
        </member>
        <member name="T:Netron.GraphLib.GraphLayoutAlgorithms">
            <summary>
            The types of graph layouts
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayoutAlgorithms.SpringEmbedder">
            <summary>
            The spring embedder algorithm
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayoutAlgorithms.Tree">
            <summary>
            The tree layout algorithm
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayoutAlgorithms.Randomizer">
            <summary>
            Randomizes the nodes on the canvas
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BasicShapeType">
            <summary>
            The basic types of shapes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicShapeType.BasicNode">
            <summary>
            A resizable node with four connectors
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicShapeType.SimpleNode">
            <summary>
            A non-resiable node with one connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicShapeType.TextLabel">
            <summary>
            A resizable text label node with no connectors
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionWeight">
            <summary>
            The possible weights of connections
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionWeight.Thin">
            <summary>
            Thin weight
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionWeight.Medium">
            <summary>
            Medium weight
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionWeight.Fat">
            <summary>
            Fat weight
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionEnd">
            <summary>
            The types of connection ends
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.LeftFilledArrow">
            <summary>
            Filled arrow at the start
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.RightFilledArrow">
            <summary>
            Filled arrow at the end
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.BothFilledArrow">
            <summary>
            Filled arrow at both sides
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.LeftOpenArrow">
            <summary>
            Open arrow at the start
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.RightOpenArrow">
            <summary>
            Open arrow at the end
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.BothOpenArrow">
            <summary>
            Open arrows at both ends
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.NoEnds">
            <summary>
            No arrows at all
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectorLocation">
            <summary>
            Connector locations
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.North">
            <summary>
            The connector's offset will point north of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.East">
            <summary>
            The connector's offset will point east of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.South">
            <summary>
            The connector's offset will point south of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.West">
            <summary>
            The connector's offset will point west of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.Omni">
            <summary>
            No connector's offset
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.Unknown">
            <summary>
            Unknown or not set
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ShapesView">
            <summary>
            The various ways you can display the shapes in the viewer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ShapesView.Tree">
            <summary>
            Display as a tree
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ShapesView.Icons">
            <summary>
            Display as large icons
            </summary>
        </member>
        <member name="T:Netron.GraphLib.HandleTypes">
            <summary>
            The types of handles of a Bezier curve
            </summary>
        </member>
        <member name="F:Netron.GraphLib.HandleTypes.Single">
            <summary>
            Only one tangent
            </summary>
        </member>
        <member name="F:Netron.GraphLib.HandleTypes.Free">
            <summary>
            Two independent tangents
            </summary>
        </member>
        <member name="F:Netron.GraphLib.HandleTypes.Symmetric">
            <summary>
            Two tangent symmetric on both sides of the handle
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BasicMathFunction">
            <summary>
            Enumerates the basic math functions available in automata nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Cos">
            <summary>
            Cosine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Sin">
            <summary>
            Sine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Tan">
            <summary>
            Tangens
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.ACos">
            <summary>
            Inverse cosine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.ASin">
            <summary>
            Inverse sine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.ATan">
            <summary>
            Inverse tangens
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Cosh">
            <summary>
            Hyperbolic cosine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Exp">
            <summary>
            Exponential
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Log">
            <summary>
            Logarithm
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Sinh">
            <summary>
            Hyperbolic sine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Tanh">
            <summary>
            Hyperbolic tangens
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Abs">
            <summary>
            Absolute value
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BasicMathOperator">
            <summary>
            Basic math operations available to automata nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathOperator.Times">
            <summary>
            Multiplication
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathOperator.Divide">
            <summary>
            Division
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathOperator.Mod">
            <summary>
            Modulo function
            </summary>
        </member>
        <member name="T:Netron.GraphLib.SortByType">
            <summary>
            Enumerates the type of sortings
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SortByType.Method">
            <summary>
            By method
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SortByType.Property">
            <summary>
            By property
            </summary>
        </member>
        <member name="T:Netron.GraphLib.SortDirection">
            <summary>
            Enumerates the sorting direction
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SortDirection.Ascending">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SortDirection.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:Netron.GraphLib.OutputInfoLevels">
            <summary>
            The different levels of information send out to the outside world 
            by the graph control.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.OutputInfoLevels.Exception">
            <summary>
            Thrown exception message
            </summary>
        </member>
        <member name="F:Netron.GraphLib.OutputInfoLevels.Info">
            <summary>
            Informative message.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.OutputInfoLevels.Default">
            <summary>
            Unspecified message
            </summary>
        </member>
        <member name="T:Netron.GraphLib.GraphAbstract">
            <summary>
            The abstract contains the abstract structure of the graph
            Pretty much just an enumeration of the elements with standard collection methods.
            Derived from the Shape class, can draw the whole plex as if it was a single shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mDefaultLayer">
            <summary>
            the default and static background layer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mLayers">
            <summary>
            the shape layers
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mSite">
            <summary>
            the control this abstract belongs to
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mShapes">
            <summary>
            the collection of shapes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mConnections">
            <summary>
            the collection of connections
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mGraphInformation">
            <summary>
            the meta-info of the graph (author, description,...)
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.paintables">
            <summary>
            ordered collection of entities
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Layers">
            <summary>
            Gets the shape layers
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.DefaultLayer">
            <summary>
            Gets the default layer of the control
            
            </summary>
            <remarks>Note that this is a static property</remarks>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Rectangle">
            <summary>
            Gets or sets the bounding rectangle
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.SumRectangles">
            <summary>
            Returns the union of the bounding rectangles of all entities
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Shapes">
            <summary>
            Gets the shape collection of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Connections">
            <summary>
            Gets the collection of connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.GraphInformation">
            <summary>
            Gets or sets the graph information, i.e. the meta-information
            of the graph like author, description, etc.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.BindEntityCollectionEvents">
            <summary>
            Binds the collections events of the ShapeCollection and ConnectionCollection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Layers_ClearComplete(System.Object,System.EventArgs)">
            <summary>
            Performs an additional reset of all shapes to the default layer if all layers are 
            removed from the collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>Note that this methods needs to be public in order to serialize the class, due to security reasons.</remarks>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Paint(System.Drawing.Graphics)">
            <summary>
            Paint overrides the base method and paints all elements of the array,
            i.e. the boxes and connectors. The paint method of the elements is called to draw themselves.
            </summary>
            <param name="g">Graphics class</param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.PaintExternal(System.Drawing.Graphics)">
            <summary>
            Paints the abstract on request of an external object (i.e. not the graph control itself) like the printer or the SaveImage method
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Insert(Netron.GraphLib.Shape)">
            <summary>
            Inserts a new object into the plex. 
            </summary>
            <param name="so">the object to insert</param>
            <remarks>Note that you can add only one shape at a time.
            </remarks>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Insert(Netron.GraphLib.Connection)">
            <summary>
            Inserts a connection in the bastract
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Delete">
            <summary>
            Deletes an element of the plex, goes via the History class, also deletes the mConnections.
            </summary>
            <remarks>Note that multiple mShapes can be delete in one go if they have the Selected flag set to true.</remarks>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Transmit">
            <summary>
            This method initiates the tramsmission of data over the mConnections. It calls the tramsit method on all sub-level objects.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Update">
            <summary>
            Starts to update all the nodes of the plex; can be a calculation on the basis of the sent values or any other.
            Usually the process before all the received values are reset.
            </summary>
            <remarks>
            In normal circumstances this method goes hand-in-hand with the transmit method.
            Well, maybe some new physics can be invented if you hack here.
            </remarks>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Site">
            <summary>
            Gets or sets the site of the abstract
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Invalidate">
            <summary>
            IPaintable.Invalidate implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.InitAutomata">
            <summary>
            IAutomataCell.InitAutomata implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.BeforeUpdate">
            <summary>
            IAutomataCell.BeforeUpdate implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.AfterUpdate">
            <summary>
            IAutomataCell.AfterUpdate implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.OnDeserialization(System.Object)">
            <summary>
            IDeserializationCallback implementation
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Netron.GraphLib.GraphInformation">
            <summary>
            Allows to add meta-info to the graph; author, description, date and so on
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mDescription">
            <summary>
            the description of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mAuthor">
            <summary>
            the author of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mCreationDate">
            <summary>
            the creation date of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mSubject">
            <summary>
            the subject of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mTitle">
            <summary>
            the title of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.Description">
            <summary>
            Gets or sets the description of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.Author">
            <summary>
            Gets or sets the author of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.CreationDate">
            <summary>
            Gets or sets the creation date of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.Subject">
            <summary>
            Gets or sets the subject of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.Title">
            <summary>
            Gets or sets the title of the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor(System.String)">
            <summary>
            Constructs an ew instance with the given title
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance with the given title and author
            </summary>
            <param name="title"></param>
            <param name="author"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a new instance with the given title, subject and author
            </summary>
            <param name="title"></param>
            <param name="author"></param>
            <param name="subject"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="T:Netron.GraphLib.GraphLayout">
            <summary>
            Abstract base class for the implementation of a layout algorithm
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.mSite">
            <summary>
            the IGraphSite or control
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.nnodes">
            <summary>
            the number of nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.nedges">
            <summary>
            the number of edges
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.CanvasSize">
            <summary>
            the canvas size
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.nodes">
            <summary>
            the nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.edges">
            <summary>
            the edges
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.extract">
            <summary>
            the abstract
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphLayout.Site">
            <summary>
            Gets or sets the mSite to which the layout belongs
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayout.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Default constructor
            </summary>
            <param name="mSite"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayout.StartLayout">
            <summary>
            Overridable start layout method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayout.StopLayout">
            <summary>
            Overridable stop layout method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayout.GraphCenter">
            <summary>
            Overridable, returns the center of the graph
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.LayoutFactory">
            <summary>
            Factory of graph layouts
            </summary>
        </member>
        <member name="T:Netron.GraphLib.LayoutFactory.runableDelegate">
            <summary>
            Delegate for running a spearate thread, used by the layout process
            </summary>
        </member>
        <member name="F:Netron.GraphLib.LayoutFactory.mGraphLayoutAlgorithm">
            <summary>
            the layout algorithm
            </summary>
        </member>
        <member name="F:Netron.GraphLib.LayoutFactory.mSite">
            <summary>
            the graph site
            </summary>
        </member>
        <member name="P:Netron.GraphLib.LayoutFactory.GraphLayoutAlgorithm">
            <summary>
            Gets or sets the graph layout algorithm
            </summary>
        </member>
        <member name="P:Netron.GraphLib.LayoutFactory.Site">
            <summary>
            Gets or sets the IGraphSite or control the factory refers to
            </summary>
        </member>
        <member name="M:Netron.GraphLib.LayoutFactory.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Default constructor
            </summary>
            <param name="mSite"></param>
        </member>
        <member name="M:Netron.GraphLib.LayoutFactory.GetRunable">
            <summary>
            Return a delegate the layout-thread can run
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.RandomizerLayout">
            <summary>
            Organizes the diagram in a random way
            </summary>
        </member>
        <member name="M:Netron.GraphLib.RandomizerLayout.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Default constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.RandomizerLayout.StartLayout">
            <summary>
            Starts the randomizer layout
            </summary>
        </member>
        <member name="T:Netron.GraphLib.SpringEmbedder">
            <summary>
            Implements the wonderful spring embedder layout algorithm, for more information see
            the hyperlinks and information pages on the Netron Project site.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SpringEmbedder.random">
            <summary>
            Allows to the shake the graph layout a bit
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SpringEmbedder.cutOff">
            <summary>
            algorithm cutoff
            </summary>
        </member>
        <member name="P:Netron.GraphLib.SpringEmbedder.LayoutCutOff">
            <summary>
            Gets or sets the cutoff of the layout, i.e. the time in seconds the layout algorithm is working
            </summary>
        </member>
        <member name="M:Netron.GraphLib.SpringEmbedder.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Class Constructor 
            </summary>
        </member>
        <member name="M:Netron.GraphLib.SpringEmbedder.StartLayout">
            <summary>
            Starts the layout process
            </summary>
        </member>
        <member name="M:Netron.GraphLib.SpringEmbedder.relax">
            <summary>
            the relaxation or layout algorithm<br>
            the MethodImpl sets a lock on the class, the 'lock(this)' could be used inside the code as well </br>
            </summary>
        </member>
        <member name="T:Netron.GraphLib.TreeLayout">
            <summary>
            Organizes the diagram in a tree structure
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TreeLayout.wordSpacing">
            <summary>
            the space between the nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TreeLayout.branchHeight">
            <summary>
            the height between branches
            </summary>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Default constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.AdjacentNodes(Netron.GraphLib.Analysis.IGraph,Netron.GraphLib.Shape)">
            <summary>
            Returns the adjacent shapes on the basis of a structuring IGraph, usually
            what is being returned by Prim's algorithm.
            This is equal to the adjacent nodes if the graph is a tree.
            Whether a connected nodes is really a 'child' is the sense of being positioned 
            on a lower level cannot be decided here but belongs to the layout
            </summary>
            <param name="structure"></param>
            <param name="shape"></param>
            <returns>A ShapeCollection of shapes</returns>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.StartLayout">
            <summary>
            Feeds the layout thread
            </summary>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.VerticalDrawTree(Netron.GraphLib.Analysis.IGraph,Netron.GraphLib.Shape,System.Boolean,System.Single,System.Single)">
            <summary>
            Positions everything underneath the node and returns the total width of the kids
            </summary>
            <param name="containerNode"></param>
            <param name="first"></param>
            <param name="shiftLeft"></param>
            <param name="shiftTop"></param>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.HorizontalDrawTree(Netron.GraphLib.Shape,System.Boolean,System.Single,System.Single)">
            <summary>
            Horizontal layout algorithm
            </summary>
            <param name="containerNode"></param>
            <param name="first"></param>
            <param name="shiftLeft"></param>
            <param name="shiftTop"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.VisitCollection">
            <summary>
            Utility class to keep track which shapes have been visited or positioned (during the layout process).
            </summary>
        </member>
        <member name="T:Netron.GraphLib.AboutForm">
            <summary>
            Splash form for the control-designer 'About'-verb.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IAutomataCell">
            <summary>
            Required signature for being part of a cellular automata network
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.InitAutomata">
            <summary>
            Initialization or reset method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.Update">
            <summary>
            Elementary step or update of the cell's state
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.Transmit">
            <summary>
            Transmits data between connections
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.BeforeUpdate">
            <summary>
            Actions before the actual update is performed
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.AfterUpdate">
            <summary>
            Actions after the update is performed
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IScript">
            <summary>
            Used by the scripter-shape in the Automatron application
            but more in general; this is part of scripting at runtime.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Initialize(Netron.GraphLib.Interfaces.IHost)">
            <summary>
            Initializes with the host
            </summary>
            <param name="Host"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Method1">
            <summary>
            Generic method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Method2">
            <summary>
            Generic method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Method3">
            <summary>
            Generic method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Compute">
            <summary>
            Computes something
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IHost">
            <summary>
            Used by the scripter-shape in the Automatron application
            but more in general; this is part of scripting at runtime.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IHost.ShowMessage(System.String)">
            <summary>
            Sends a message to the GUI
            </summary>
            <param name="Message"></param>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IHost.Out">
            <summary>
            Gets the Out-connector of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IHost.XIn">
            <summary>
            Gets the x-value of the connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IHost.YIn">
            <summary>
            Gets the y-value of the connector
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IConnection">
            <summary>
            Connection interface
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.LinePath">
            <summary>
            Gets or sets the line-path (rectangular, Bezier...) of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.LineStyle">
            <summary>
            Gets or sets the line-style (dashed, continuous...) of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.LineEnd">
            <summary>
            Gets or sets the line-end (arrows etc.) of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.LineColor">
            <summary>
            Gets or sets the line-color of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.From">
            <summary>
            Gets or sets the start-connector of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.To">
            <summary>
            Gets or sets the end-connector of the connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IConnection.AddConnectionPoint(System.Drawing.PointF)">
            <summary>
            Adds a connection point to the collection of intermediate connection points
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IConnection.RemoveConnectionPoint(System.Drawing.PointF)">
            <summary>
            Removes an intermediate connection point
            </summary>
            <param name="point"></param>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IEntity">
            <summary>
            Entity interface
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.UID">
            <summary>
            Gets or sets the unique identifier of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Layer">
            <summary>
            Gets the layer to which the entity belongs
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Tag">
            <summary>
            Gets or sets the tag-object attached to the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Properties">
            <summary>
            Gets the propertybag of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Text">
            <summary>
            Gets or sets the text of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Tracker">
            <summary>
            Gets the tracker of the entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.SetLayer(System.String)">
            <summary>
            Sets the layer to which the entity belongs
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.SetLayer(System.Int32)">
            <summary>
            Sets the layer to which the entity belongs
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.AddProperties">
            <summary>
            Adds the properties of the entity to the bag
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Summary">
            <summary>
            Gets the Summary for this entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.GetCursor(System.Drawing.PointF)">
            <summary>
            Gets the cursor when the mouse is hovering the given point in the entity
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.Hit(System.Drawing.RectangleF)">
            <summary>
            Says wether, for the given rectangle, the underlying shape is contained in it.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.PostDeserialization">
            <summary>
            Post-deserialization actions
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IEntityBundle">
            <summary>
            Describes a collection of shapes and connections;
            this can be the whole GraphAbstract or a subset of a diagram.
            In general, anything that can be (de)serialized to/from the diagram.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntityBundle.Connections">
            <summary>
            Gets the connection collection of the bundle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntityBundle.Shapes">
            <summary>
            Gets the shape collection of the bundle
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IGraphLayout">
            <summary>
            Required layout methods
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphLayout.StartLayout">
            <summary>
            This is the layout method running on a separate thread.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphLayout.StopLayout">
            <summary>
            Stops the layout process
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IGraphSite">
            <summary>
            Interface of a graph site (control) 
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Layers">
            <summary>
            Gets the layers defined in the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Abstract">
            <summary>
            Gets the graph-abstract
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Libraries">
            <summary>
            Gets the libraries defined and loaded of custom objects
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Shapes">
            <summary>
            Gets the collection of shapes active in the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Connections">
            <summary>
            Gets the collection of connection active in the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Size">
            <summary>
            Gets the size of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Zoom">
            <summary>
            Gets or sets the zoom-value
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.RestrictToCanvas">
            <summary>
            Gets or sets whether to restrict to the canvas
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.AutoScrollPosition">
            <summary>
            Gets or sets the AutoScrollPosition
            <seealso cref="P:System.Windows.Forms.ScrollableControl.AutoScrollPosition"/>
            </summary>
            
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.DoTrack">
            <summary>
            Gets or sets whether tracking is on
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Width">
            <summary>
            Gets the width of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Height">
            <summary>
            Gets the height of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Graphics">
            <summary>
            Gets the Graphics object used by the control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.Invalidate(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Invalidates the given rectangle and its children
            </summary>
            <param name="r">A System.Drawing.Rectangle object that represents the region to invalidate. </param>
            <param name="b">invalidateChildren: true to invalidate the control's child controls; otherwise, false.</param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidates the given rectangle
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.Invalidate">
            <summary>
            Invalidate the whole control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.InvalidateRectangle(System.Drawing.Rectangle)">
            <summary>
            Let the site invalidate the rectangle
            </summary>
            <param name="rect">invalid rectangle</param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.ZoomPoint(System.Drawing.Point)">
            <summary>
            Zooms a point
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.UnzoomPoint(System.Drawing.Point)">
            <summary>
            Unzooms a point.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.ZoomRectangle(System.Drawing.Rectangle)">
            <summary>
            Zooms a rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.UnzoomRectangle(System.Drawing.Rectangle)">
            <summary>
            Unzooms a rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.ZoomPoint(System.Drawing.PointF)">
            <summary>
            Zooms a point
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.UnzoomPoint(System.Drawing.PointF)">
            <summary>
            Unzooms a point.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.ZoomRectangle(System.Drawing.RectangleF)">
            <summary>
            Zooms a rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.UnzoomRectangle(System.Drawing.RectangleF)">
            <summary>
            Unzooms a rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.PaintArrow(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Paints an arrow
            </summary>
            <param name="g"></param>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <param name="lineColor"></param>
            <param name="filled"></param>
            <param name="showLabel"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.GetEntity(System.String)">
            <summary>
            Gets the entity with the given UID
            </summary>
            <param name="UID"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseShowProperties(Netron.GraphLib.PropertyBag)">
            <summary>
            Raises the ShowProps event
            </summary>
            <param name="props"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseOnShapeAdded(Netron.GraphLib.Shape)">
            <summary>
            Raises the OnShapeAdded event
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseOnConnectionAdded(Netron.GraphLib.Connection,System.Boolean)">
            <summary>
            Raises the OnConnectionAdded event
            </summary>
            <param name="connection"></param>
            <param name="manual"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseOnShowGraphLayers">
            <summary>
            Raises the OnShowGraphLayers event
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseOnShowPropertiesDialogRequest">
            <summary>
            Raises the OnShowPropertiesDialogRequest event
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.GetSummary(Netron.GraphLib.Entity)">
            <summary>
            Gets the Summary of the given entity
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.GetLayerAttributes">
            <summary>
            Returns the layers as a Attribute-array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.SetToolTip(System.String)">
            <summary>
            Sets the tooltip of the control
            </summary>
            <param name="tip"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.OutputInfo(System.Object)">
            <summary>
            Outputs info to the outside world
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.OutputInfo(System.Object,Netron.GraphLib.OutputInfoLevels)">
            <summary>
            Outputs info to the outside world
            </summary>
            <param name="obj"></param>
            <param name="level"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.Open(System.String)">
            <summary>
            Opens a binary saved diagram
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.ILayoutElement">
            <summary>
            This interfaces lays out the basic elements necessary to participate in a layout procedure
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.X">
            <summary>
            Gets or sets the x-coordinate of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.Y">
            <summary>
            Gets or sets the y-coordinate of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.dx">
            <summary>
            Gets or sets an infinitesimal change in the x-direction
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.dy">
            <summary>
            Gets or sets an infinitesimal change in the y-direction
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.IsFixed">
            <summary>
            Gets or sets whether the shape participates to the layout process
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IPaintable">
            <summary>
            Describes a paintable element of the graph-control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IPaintable.Site">
            <summary>
            Gets or sets the site (or graph control) to which the entity belongs
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IPaintable.Invalidate">
            <summary>
            Invalidating/refreshes part or all of a control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IPaintable.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the entity on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IReporter">
            <summary>
            Describes a reporting utility
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IReporter.Report">
            <summary>
            Returns a report, the datatype depends on the actual reporting implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IShape">
            <summary>
            The Shape interface
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.ZOrder">
            <summary>
            Gets or sets the z-order of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.IsResizable">
            <summary>
            Gets or sets whether the shape is resizable
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.CanMove">
            <summary>
            Gets or sets whether the shape can be moved around.
            Note that the Fixed property is used to set whether the shape
            participates in the layout-process.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.ShapeColor">
            <summary>
            Gets or sets the color of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.Location">
            <summary>
            Gets or sets the location of the shape on the canvas
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.GetThumbnail">
            <summary>
            Returns a thumbnail to be shown in the shape-viewer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.FitSize(System.Boolean)">
            <summary>
            Adapts the shape's width and height to fit the text
            
            </summary>
            <param name="square">true to make the shape square</param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.ShapeMenu">
            <summary>
            Allows to extend the default menu on a per-shape basis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Additional actions on key-down for a shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Additional actions on key-press for a shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IWidget">
            <summary>
            Describes the elements of a widget
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.GetCursor(System.Drawing.PointF)">
            <summary>
            Gets the cursor when the mouse is hovering the given point in the entity
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.Hit(System.Drawing.RectangleF)">
            <summary>
            Says wether, for the given rectangle, the underlying shape is contained in it.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.OnMouseDown(System.Drawing.PointF)">
            <summary>
            Handles the mouse down event on the widget
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.OnMouseMove(System.Drawing.PointF)">
            <summary>
            Handles the mouse move event on the widget
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.OnTransmission">
            <summary>
            Reacts to the transmission event
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Binary.BinaryAmbiance">
            <summary>
            Collects ambient properties of the GraphControl
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mLocked">
            <summary>
            the Locked setting
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mShowGrid">
            <summary>
            the ShowGrid setting
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGradientBottom">
            <summary>
            the bottom gradient
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGradientTop">
            <summary>
            the top gradient
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAllowAddConnection">
            <summary>
            the AllowAddConnection property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAllowAddShape">
            <summary>
            the AllowAddShape property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAllowDeleteShape">
            <summary>
            the AllowDeleteShape property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAllowMoveShape">
            <summary>
            the AllowMoveShape property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAutomataPulse">
            <summary>
            the AutomataPulse property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mBackgroundColor">
            <summary>
            the BackgroundColor property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mBackgroundImagePath">
            <summary>
            the BackgroundImagePath property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mBackgroundType">
            <summary>
            the BackgroundType property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mDefaultConnectionPath">
            <summary>
            the DefaultConnectionPath property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGradientMode">
            <summary>
            the GradientMode property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mEnableContextMenu">
            <summary>
            the EnableContextMenu property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGridSize">
            <summary>
            the GridSize property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mRestrictToCanvas">
            <summary>
            the RestrictToCanvas property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mSnap">
            <summary>
            the Snap property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mDefaultConnectionEnd">
            <summary>
            the DefaultConnectionEnd property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mEnableLayout">
            <summary>
            the mEnableLayout property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGraphLayoutAlgorithm">
            <summary>
            the GraphLayoutAlgorithm property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mEnableTooltip">
            <summary>
            the EnableTooltip property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mShowAutomataController">
            <summary>
            the ShowAutomataController property
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.ShowAutomataController">
            <summary>
            Gets or sets whether the internal dataflow is runnning
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.EnableTooltip">
            <summary>
            Gets or sets the EnableTooltip property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.Locked">
            <summary>
            Gets or sets the Locked property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GraphLayoutAlgorithm">
            <summary>
            Gets or sets the GraphLayoutAlgorithm property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.EnableLayout">
            <summary>
            Gets or sets the EnableLayout property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.DefaultConnectionEnd">
            <summary>
            Gets or sets the DefaultConnectionEnd property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.Snap">
            <summary>
            Gets or sets the Snap property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.RestrictToCanvas">
            <summary>
            Gets or sets the RestrictToCanvas property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GridSize">
            <summary>
            Gets or sets the GridSize property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GradientMode">
            <summary>
            Gets or sets the GradientMode property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.EnableContextMenu">
            <summary>
            Gets or sets the EnableContextMenu property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.DefaultConnectionPath">
            <summary>
            Gets or sets the DefaultConnectionPath property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.BackgroundType">
            <summary>
            Gets or sets the BackgroundType property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.BackgroundImagePath">
            <summary>
            Gets or sets the BackgroundImagePath property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.BackgroundColor">
            <summary>
            Gets or sets the BackgroundColor property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AutomataPulse">
            <summary>
            Gets or sets the AutomataPulse property
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AllowMoveShape">
            <summary>
            Gets or sets the AllowAddShape property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AllowDeleteShape">
            <summary>
            Gets or sets the AllowAddShape property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AllowAddShape">
            <summary>
            Gets or sets the AllowAddShape property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AllowAddConnection">
            <summary>
            Gets or sets the AllowAddConnection property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GradientTop">
            <summary>
            Gets or sets the gradient top-color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GradientBottom">
            <summary>
            Gets or sets the gradient bottom-color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.ShowGrid">
            <summary>
            Gets or sets the ShowGrid setting
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryAmbiance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryAmbiance.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryAmbiance.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization of this class
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Netron.GraphLib.IO.Binary.BinaryCapsule">
            <summary>
            Encapsulates the GraphAbstract and additional ambient properties of the GraphControl
            for binary (de)serialization.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryCapsule.mGraphAbstract">
            <summary>
            the actual diagram
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryCapsule.mBinaryAmbiance">
            <summary>
            the ambiant properties
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryCapsule.mThumbnail">
            <summary>
            the thumbnail
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryCapsule.Thumbnail">
            <summary>
            Gets or sets the thumbnail of the diagram
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryCapsule.Abstract">
            <summary>
            Gets or sets the GraphAbstract
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryCapsule.Ambiance">
            <summary>
            Gets or sets the ambiance properties
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryCapsule.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryCapsule.#ctor(Netron.GraphLib.GraphAbstract,Netron.GraphLib.IO.Binary.BinaryAmbiance)">
            <summary>
            Constructor
            </summary>
            <param name="graphAbstract"></param>
            <param name="ambiance"></param>
        </member>
        <member name="T:Netron.GraphLib.IO.Binary.BinarySerializer">
            <summary>
            Utility class to binary (de)serialize a diagram (from) to file
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.GetControlAmbiance(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Returns the ambiance of the GraphControl
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.SetControlAmbiance(Netron.GraphLib.UI.GraphControl,Netron.GraphLib.IO.Binary.BinaryAmbiance)">
            <summary>
            Sets the GraphControl's properties with the given deserialized ambiance
            </summary>
            <param name="site"></param>
            <param name="ambiance"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.SaveAs(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Binary saves the diagram
            </summary>
            <param name="fileName">the file-path</param>
            <param name="site">the graph-control instance to be serialized</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.Open(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Opens the binary-saved diagram
            </summary>
            <param name="fileName"></param>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.UnwrapBundle(Netron.GraphLib.Interfaces.IEntityBundle,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Unwraps the IEntityBundle to the given site
            </summary>
            <param name="bundle"></param>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.DumpInfo">
            <summary>
            Dumps info related to the binary serialization
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.DumpInfo(System.Reflection.MemberInfo[])">
            <summary>
            Dumps info related to the binary serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="T:Netron.GraphLib.IO.HTML.HTMLExporter">
            <summary>
            Exports a diagram to HTML
            includes the diagram as an image with an
            imagemap if there are URL's included on shapes.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.HTML.HTMLExporter.mSite">
            <summary>
            the graph control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.HTML.HTMLExporter.#ctor(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Default constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.HTML.HTMLExporter.CreateDirAndFiles(System.String)">
            <summary>
            Creates the necessary files and directories for the export
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.HTML.HTMLExporter.GetURLMap">
            <summary>
            Creates the image-map for the clickable areas related to the URL on the shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.HTML.HTMLExporter.SaveAs(System.String)">
            <summary>
            Saves an HTML version of the diagram to the given file
            </summary>
            <param name="filePath">a path</param>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.DataCollection">
            <summary>
            Generic Collection of NML related data
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DataCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.Add(System.Object)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.Contains(System.Object)">
            <summary>
            Returns whether the given object is in the collection
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.Remove(System.Object)">
            <summary>
            Remove an item from the collection
            </summary>
            <param name="o"></param>		
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.ToString">
            <summary>
            Overrides the default method to return
            the content of the collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.FromToCollection">
            <summary>
            STC of FromTo collection, related to deserailization of connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.FromToCollection.Item(System.Int32)">
            <summary>
            integer indexer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.FromToCollection.Add(Netron.GraphLib.IO.NML.FromTo)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="ft">a ParentChild object</param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.ConnectionType">
            <summary>
            The XML wrappper of an edge or connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mData">
            <summary>
            the data collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mSource">
            <summary>
            the source
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mUID">
            <summary>
            the mUID
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mSourcePort">
            <summary>
            the source-connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mTargetPort">
            <summary>
            the target-connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mTarget">
            <summary>
            the target
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mGraph">
            <summary>
            the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mInstanceKey">
            <summary>
            the unique key to the shape to be instantiated
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.InstanceKey">
            <summary>
            Gets or sets which key to use to instantiate the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Data">
            <summary>
            Gets or sets the data collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Graph">
            <summary>
            Gets or sets the graph the connection belongs to
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.ID">
            <summary>
            Gets or sets the mUID
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Source">
            <summary>
            Gets or sets the source
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Target">
            <summary>
            Gets or sets the target
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Sourceport">
            <summary>
            Gets or sets the source-connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Targetport">
            <summary>
            Gets or sets the target-connector
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.ConnectorType">
            <summary>
            XML wrapper of a Connector object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectorType.mUID">
            <summary>
            the uid
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectorType.name">
            <summary>
            the name
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectorType.UID">
            <summary>
            Gets or sets the UID
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectorType.Name">
            <summary>
            Gets or sets the name of the connector
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.DataType">
            <summary>
            Generic XML wrapper for any diagram data
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.DataType.mValue">
            <summary>
            data collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.DataType.mName">
            <summary>
            the key
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.DataType.mIsCollection">
            <summary>
            the mIsCollection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DataType.Name">
            <summary>
            Gets or sets the key of the data type
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DataType.IsCollection">
            <summary>
            Gets or sets the mIsCollection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DataType.Value">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataType.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.DefaultType">
            <summary>
            XML wrapper for a default
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.DefaultType.mText">
            <summary>
            the text
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DefaultType.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.GraphEdgeDefaultType">
            <summary>
            XML wrapper for the edge type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphEdgeDefaultType.Directed">
            <summary>
            Directed edge
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphEdgeDefaultType.Undirected">
            <summary>
            Undirected edge
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.KeyForType">
            <summary>
            For key-types
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.Graph">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.Node">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.HyperEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.Port">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.EndPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.FromTo">
            <summary>
            Utility class to speed up the deserialization of connections
            This struct keeps unattached connections, the connections have the UID of the From and the To connector
            but the respective connectors are still null
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.FromTo.#ctor(System.String,System.String)">
            <summary>
            Default ctor
            </summary>		
        </member>
        <member name="M:Netron.GraphLib.IO.NML.FromTo.#ctor(System.String,System.String,Netron.GraphLib.Connection)">
            <summary>
            constructor
            </summary>
            <param name="from">the UID of the From-connector</param>
            <param name="to">the UID of the To-Connector</param>
            <param name="con">the instantiated connection</param>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.FromTo.From">
            <summary>
            Gets or sets the parent in this relation
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.FromTo.To">
            <summary>
            Gets or sets the child in this relation
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.FromTo.Connection">
            <summary>
            Gets or sets the connection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.GraphInformationType">
            <summary>
            Generic XML wrapper for any diagram data
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mDescription">
            <summary>
            the description of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mAuthor">
            <summary>
            the author of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mCreationDate">
            <summary>
            the creation date of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mSubject">
            <summary>
            the subject of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mTitle">
            <summary>
            the title of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.Description">
            <summary>
            Gets or sets the description of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.Author">
            <summary>
            Gets or sets the author of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.CreationDate">
            <summary>
            Gets or sets the creation date of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.Subject">
            <summary>
            Gets or sets the subject of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.Title">
            <summary>
            Gets or sets the title of the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.GraphInformationType.#ctor">
            <summary>
            Required XMLSerilization constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.GraphInformationType.#ctor(Netron.GraphLib.GraphInformation)">
            <summary>
            Default constructor
            </summary>
            <param name="info"></param>		
        </member>
        <member name="M:Netron.GraphLib.IO.NML.GraphInformationType.ToGraphInformation">
            <summary>
            Returns this type as a GraphInformation object.
            </summary>
            <remarks>Used at deserialization</remarks>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.GraphType">
            <summary>
            XML wrapper for a graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphType.mItems">
            <summary>
            the items
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphType.GraphInformation">
            <summary>
            Gets or sets the graph-info of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphType.Items">
            <summary>
            Gets or sets the item collection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.GraphType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.KeyType">
            <summary>
            XML wrapper for the key-type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyType.mDefault">
            <summary>
            the default type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyType.id">
            <summary>
            the ide
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyType.mDescription">
            <summary>
            the description
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyType.mFor">
            <summary>
            the for key-type
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.KeyType.Desc">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.KeyType.Default">
            <summary>
            Gets or sets the default type
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.KeyType.ID">
            <summary>
            Gets or sets the id
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.KeyType.For">
            <summary>
            Gets or sets the for key-type
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.LocatorType">
            <summary>
            XML wrapper for the locator type
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.NMLSerializer">
            <summary>
            NMLSerializer serializes a graph to NML
            Thanks to Martin Cully for his work on this.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.#ctor(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dtdPath"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Open(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Opens a NML serialized file
            </summary>
            <param name="filename"></param>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.SaveAs(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Saves the diagram to NML format
            </summary>
            <param name="fileName">the file-path</param>
            <param name="site">the graph-control instance to be serialized</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Serialize(System.Xml.XmlWriter,Netron.GraphLib.GraphAbstract)">
            <summary>
            Starts the serialization process. Takes the abstract of the graph and
            constructs a NMLType proxy-like object which will be serialized via the 
            standard .Net XmlSerializer process.
            </summary>
            <param name="writer">An XmlWriter</param>
            <param name="g">The GraphAbstract object to be serialized</param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Serialize">
            <summary>
            Returns the NML representation of the given GraphAbstract
            </summary>	
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.SerializeNode(Netron.GraphLib.Shape)">
            <summary>
            Serializes a node
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.SerializeEdge(Netron.GraphLib.Connection)">
            <summary>
            Serializes an edge
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserializes the graph's xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the presumed NML-string to a GraphAbstract object
            </summary>
            <param name="xml">NML compliant string</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Deserialize(Netron.GraphLib.IO.NML.NMLType)">
            <summary>
            Deserializes the graphtype, here's where all the smart stuff happens
            </summary>
            <param name="gml">the graphtype which acts as an intermediate storage between XML and the GraphAbstract
            </param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Validate(System.Xml.XmlReader)">
            <summary>
            Validation of the XML
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.ValidationHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Outputs the validation of the XML
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.GetShape(System.String)">
            <summary>
            Returns a shape on the basis of the unique instantiation key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.FormatID(Netron.GraphLib.Entity)">
            <summary>
            Returns the UID of the entity in string format
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.DataTypesFromAttributes(Netron.GraphLib.IO.NML.PropertiesHashtable)">
            <summary>
            Converts the hashtable of GraphML-marked properties to types
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.GetTypeQualifiedName(System.Object)">
            <summary>
            Returns qualified type name of o
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.GetTypeQualifiedName(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.NMLType">
            <summary>
            The base-template class for the NML serialization,
            this class corresponds to the root of the XML
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.NMLType.mKeys">
            <summary>
            the keys
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.NMLType.mGraph">
            <summary>
            the graph node
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.NMLType.mVersion">
            <summary>
            the graphlib version
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.NMLType.mItems">
            <summary>
            the data items
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.NMLType.Version">
            <summary>
            Gets or sets the NML version
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.NMLType.Graph">
            <summary>
            Gets or sets the serialized graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.NMLType.Key">
            <summary>
            Gets or sets the key-collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.NMLType.Items">
            <summary>
            Gets or sets the data collection for the graph
            </summary>        
        </member>
        <member name="T:Netron.GraphLib.IO.NML.PortType">
            <summary>
            The NML template corresponding to the XML of a connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.PortType.mItems">
            <summary>
            the data items
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.PortType.mName">
            <summary>
            the name of the port
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.PortType.mDescription">
            <summary>
            the description of the port
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PortType.Desc">
            <summary>
            Gets or sets the description of the port
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PortType.Items">
            <summary>
            Gets or sets the data items
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PortType.Name">
            <summary>
            Gets or sets the name of the port
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.PropertiesHashtable">
            <summary>
            STC of string-value pairs, helpful in keeping a collection of properties with their value
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.PropertiesHashtable.mKeys">
            <summary>
            keeps the collection of keys
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PropertiesHashtable.Keys">
            <summary>
            Gets the keys of the hashtable and
            allows to loop over the keys without
            boxing/unboxing.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.PropertiesHashtable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.PropertiesHashtable.Add(System.String,System.Object)">
            <summary>
            Adds a property-value pair
            </summary>
            <param name="key"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PropertiesHashtable.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.PropertiesHashtable.Remove(System.String)">
            <summary>
            Removes an elements based on a key
            </summary>
            <param name="key">a (string) key</param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.ShapeType">
            <summary>
            XML wrapper for a shape object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ShapeType.mData">
            <summary>
            data collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ShapeType.mDescription">
            <summary>
            the description
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ShapeType.mUID">
            <summary>
            the mUID
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ShapeType.mInstanceKey">
            <summary>
            the unique key to the shape to be instantiated
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ShapeType.InstanceKey">
            <summary>
            Gets or sets the key to use when instantiating/deserializing the node again
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ShapeType.Desc">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ShapeType.Data">
            <summary>
            Gets or sets the data collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ShapeType.UID">
            <summary>
            Gets or sets the mUID
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.AssemblyReporter">
            <summary>
            Summary description for AssemblyReporter.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.AssemblyReporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.BinaryReport">
            <summary>
            Encapsulates the reporting of a single diagram saved to binary file
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mSize">
            <summary>
            the size of the file
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mPath">
            <summary>
            the path to tht file
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mThumbnail">
            <summary>
            the thumbnail
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mDescription">
            <summary>
            the description of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mAuthor">
            <summary>
            the author of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mCreationDate">
            <summary>
            the creation date of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mSubject">
            <summary>
            the subject of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mTitle">
            <summary>
            the title of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.FileSize">
            <summary>
            Gets or sets the file-size
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Path">
            <summary>
            Gets or sets the path to the file
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Thumbnail">
            <summary>
            Gets or sets the thumbnail
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Description">
            <summary>
            Gets or sets the description of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Author">
            <summary>
            Gets or sets the author of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.CreationDate">
            <summary>
            Gets or sets the creation date of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Subject">
            <summary>
            Gets or sets the subject of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Title">
            <summary>
            Gets or sets the title of the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.BinaryReportCollection">
            <summary>
            STC of BinaryReport objects
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReportCollection.Add(Netron.GraphLib.IO.Reporting.BinaryReport)">
            <summary>
            Adds a report to the collection
            </summary>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReportCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReportCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.BinaryReporter">
            <summary>
            Summary description for BinaryReporter.
            </summary>
        </member>
        <member name="E:Netron.GraphLib.IO.Reporting.BinaryReporter.OnReport">
            <summary>
            Occurs when a report is found and added to the collection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReporter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">the path to either a binary saved diagram or a directory, in the latter case the report will contain a
            collection of reports</param>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReporter.Report">
            <summary>
            Returns a BinaryReport or a collection of BinaryReport objects depending on whether the given path is a file or a directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReporter.GetReports">
            <summary>
            Assuming the given path is a directory this method will return a 
            collection of BinaryReports of the binary diagram in the directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReporter.GetReport(System.String)">
            <summary>
            Returns a BinaryReport of the diagram save in the given path/file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.ShapeReporter">
            <summary>
            Summary description for ShapeReporter.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.ShapeReporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.SVG.SVGSerializer">
            <summary>
            Exports a diagram to SVG
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.SVG.SVGSerializer.#ctor(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Defautl constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.SVG.SVGSerializer.Serialize(System.Xml.XmlWriter,Netron.GraphLib.GraphAbstract)">
            <summary>
            Serializes the given graph abstract to XML with the given XmlWriter
            </summary>
            <param name="writer"></param>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.SVG.SVGSerializer.SaveAs(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Saves the diagram to SVG format
            </summary>
            <param name="fileName">the file-path</param>
            <param name="site">the graph-control instance to be serialized</param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Selector">
            <summary>
            When you drag with the mouse this class produces the dashed line rectangle to visualize the elements you select.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Selector.#ctor(System.Drawing.PointF,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Constructor of the class
            </summary>
            <param name="p"></param>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.Selector.Update(System.Drawing.PointF)">
            <summary>
            Update the selector to reflect the current position of the mouse
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.Selector.Paint(System.Windows.Forms.Control)">
            <summary>
            Paint the selector on the canvas
            </summary>
            <param name="c"></param>
            
        </member>
        <member name="P:Netron.GraphLib.Selector.Rectangle">
            <summary>
            The rectangle corresponding to the selector marquee
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Selector.Invalidate">
            <summary>
            Invalidates the selector
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Shape">
            <summary>
            Template class definition to be inherited by all shapes you want to insert and use in your plex
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.urlImage">
            <summary>
            the URL icon
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mURL">
            <summary>
            hyperlink to web or file
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mSquare">
            <summary>
            whether the shape is square
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mZOrder">
            <summary>
            the z-order of the shapes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mCanMove">
            <summary>
            whether you can move the shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mControls">
            <summary>
            the array list of .Net mControls the shape contains
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mDeltaX">
            <summary>
            the infinitesimal x-shift used by layout
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mDeltaY">
            <summary>
            the infinitesimal y-shift used by layout
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mIsFixed">
            <summary>
            fixed node boolean
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mShapeColor">
            <summary>
            the default node color
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mIsResizable">
            <summary>
            tells wether or not the user can resize the mRectangle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mConnectors">
            <summary>
            The internal collection of mConnectors attached to this shape object
            </summary>
            <remarks>
            Note that mConnectors are sub-ordinated to the shapes and thus do not have to be deleted or taken care off independently
            </remarks>
        </member>
        <member name="F:Netron.GraphLib.Shape.mRectangle">
            <summary>
            This is the floating-point mRectangle associated to the shape
            It determines the shape's size or boundaries
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mShapeTracker">
            <summary>
            The internal tracker object, representing the mRectangle and grips with which one can resize the shape.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mIsVisible">
            <summary>
            whether the shape is visible
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mIsExpanded">
            <summary>
            whether the shape's adjacent nodes are expanded
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.PostDeserialization">
            <summary>
            Additional actions after deserialization
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.URL">
            <summary>
            Gets or sets the hyperlink of this shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsSquare">
            <summary>
            Gets or sets whether width and height are equal (square shape)
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Abstract">
            <summary>
            Gets the abstract of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.FontSize">
            <summary>
            Gets or sets the font size
            </summary>
            /// <remarks>Redefines the FontSize property of the Entity class as public <see cref="T:Netron.GraphLib.Entity"/></remarks>
        </member>
        <member name="P:Netron.GraphLib.Shape.Font">
            <summary>
            Gets or sets the font to be used for drawing text
            
            </summary>
            <remarks>Redefines the Font property of the Entity class as public <see cref="T:Netron.GraphLib.Entity"/></remarks>
        </member>
        <member name="P:Netron.GraphLib.Shape.ZOrder">
            <summary>
            Gets or sets the z-order of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsResizable">
            <summary>
            Gets or sets whether the shape can be resized
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.CanMove">
            <summary>
            Gets or sets whether the shape can be moved around.
            Note that the Fixed property is used to set whether the shape
            participates in the layout-process.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.Zoom(System.Single)">
            <summary>
            Zooms the shape
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.SetLayer(Netron.GraphLib.GraphLayer)">
            <summary>
            Override the Entity.SetLayer to adapt the shape's appearance in function of the 
            layer's parameters.
            </summary>
            <param name="layer">a pre-defined or added graph-layer</param>
        </member>
        <member name="P:Netron.GraphLib.Shape.Rectangle">
            <summary>
            返回此形状的关联mRectangle
            </summary>
            <remarks>
            如果开始使用非矩形形状，这一点的必要性将变得更加明显.
            </remarks>
        </member>
        <member name="P:Netron.GraphLib.Shape.Connectors">
            <summary>
            Returns the collection of mConnectors for this shape object
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsSelected">
            <summary>
            Is the shape selected?
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Controls">
            <summary>
            The list of Controls the shape contains
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Tracker">
            <summary>
            Returns the tracker, which represents the grips and mRectangle with which one can resize the shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.X">
            <summary>
            Gets or sets the x-coordinate of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Y">
            <summary>
            Gets or sets the y-coordinate
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Location">
            <summary>
            Gets or sets the location of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.dx">
            <summary>
            Increment in x for the graph layout
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.dy">
            <summary>
            Increment in y for the graph layout
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsFixed">
            <summary>
            Gets or sets whether the shape is fixed/unmovable.
            Note that the CanMove property is used to enable/disable the shape moves
            via the mouse while this property enables/disable the layout-process for this shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.ShapeColor">
            <summary>
            Gets or sets the node color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.BackgroundBrush">
            <summary>
            Gets the background brush
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.TextBrush">
            <summary>
            Gets the text brush
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Width">
            <summary>
            Width of a shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Height">
            <summary>
            Height of a shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.AdjacentNodes">
            <summary>
            Gets the collection of nodes attached to this node
            获取附加到此节点的节点的集合
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsVisible">
            <summary>
            Gets or sets whether the shape is visible on the canvas
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsExpanded">
            <summary>
            Gets or sets whether the shape shows its sub-shapes
            This property, its validity, depends on the overal topology of the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.NewConnectionsTo(System.Boolean)">
            <summary>
            Sets whether the connectors of this shape allow new connections to be attached to this shape
            </summary>
            <param name="value">if true, all connectors allow new connection to this shape</param>
        </member>
        <member name="M:Netron.GraphLib.Shape.NewConnectionsFrom(System.Boolean)">
            <summary>
            Sets whether the connectors of this shape allow new connections to be launched from this shape
            </summary>
            <param name="value">if true, all connectors allow new connection to this shape</param>
        </member>
        <member name="M:Netron.GraphLib.Shape.Transmit">
            <summary>
            This method represents the transmission of data over a connection. Once the data is transmitted to the mConnectors the senders' value is reset
            </summary>
            <remarks>This method is not strictly part of the plex structure but belongs to the possible applications.</remarks>
        </member>
        <member name="M:Netron.GraphLib.Shape.BeforeUpdate">
            <summary>
            Actions to perform before the update
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.AfterUpdate">
            <summary>
            Actions to perform after the update
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.Update">
            <summary>
            The method allows to update the dynamical state of the plex, to compute something on the basis of the received values and to set the new send values.
            
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.IsConnectedTo(Netron.GraphLib.Shape)">
            <summary>
            返回形状是否连接到给定形状
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.InitAutomata">
            <summary>
            Required interface implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.Insert(Netron.GraphLib.GraphAbstract)">
            <summary>
            Adds the shape to an GraphAbstract collection
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.Delete">
            <summary>
            Removes itself from an GraphAbstract. The mConnectors are deleted as part of this deletion process.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.Hit(System.Drawing.RectangleF)">
            <summary>
            Returns true if the given mRectangle contains the shape (this)
            </summary>
            <param name="r">A floating-point mRectangle object</param>
            <returns>True if contained</returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.ConnectionPoint(Netron.GraphLib.Connector)">
            <summary>
            Returns the coordinates of a given connector attached to this shape
            </summary>
            <param name="c">A connector object</param>
            <returns>A floating-point point (pointF)</returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.GetThumbnail">
            <summary>
            Returns the thumbnail of the shape (for the shape viewer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.Paint(System.Drawing.Graphics)">
            <summary>
            Overrides the paint method
            </summary>
            <remarks>
            Do not forget to call this via base.Paint to paint the tracker.
            </remarks>
            <param name="g">The graphics canvas onto which to paint</param>
        </member>
        <member name="M:Netron.GraphLib.Shape.PaintAdornments(System.Drawing.Graphics)">
            <summary>
            Paints the adornments (URL link etc.)
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.FitSize(System.Boolean)">
            <summary>
            
            </summary>
            <param name="square">if true the shape will be square with the maximum otherwise only the width will be resized to fit the content</param>
        </member>
        <member name="M:Netron.GraphLib.Shape.Invalidate">
            <summary>
            Refreshes the shape
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.GetCursor(System.Drawing.PointF)">
            <summary>
            Returns the cursor for this shape
            </summary>
            <param name="p">A floaint-point point</param>
            <returns>A cursor object</returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.HandleURL">
            <summary>
            Handles the different recognized URL types:
            http://  - opens the default browser
            netron:// - opens the diagram from the specified location
            showgraphproperties - the graph properties are displayed
            showgraphlayers - the graph layers are displayed
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.MoveControls">
            <summary>
            Moves the shape controls (if any) when the shape has been moved
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.AddProperties">
            <summary>
            Adds the basic properties of the shape
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.GetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Allows the propertygrid to set new values
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.SetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Allows the propertygrid to set new values
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.ShapeMenu">
            <summary>
            Allows to extend the default canvas menu with additional items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridable OnKeyDown handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Overridable OnKeyPress handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="T:Netron.GraphLib.ShapeTracker">
            <summary>
            The tracker implements the possibility to resize the plex boxes, it shows the grips with which you can drag and resize the rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.#ctor(System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Class Constructor 
            </summary>
            <param name="r"></param>
            <param name="s"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.#ctor(Netron.GraphLib.Interfaces.IGraphSite,System.Drawing.RectangleF,System.Boolean,System.Boolean,Netron.GraphLib.Shape)">
            <summary>
            Constructs a new ShapeTracker for the given IGraphSite, based on the given rectangle and whether it's resizable.
            </summary>
            <param name="site"></param>
            <param name="r"></param>
            <param name="resizable"></param>
            <param name="square">whether the tracker should constraint the shape to square proportions</param>
            <param name="shape">the shape to which this tracker applies</param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.ChangeLocation(System.Drawing.PointF)">
            <summary>
            Changes the location of the tracker
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Hit(System.Drawing.PointF)">
            <summary>
            Returns an integer point if hit with a given floating-point point
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Cursor(System.Drawing.PointF)">
            <summary>
            Returns the cursor for the given point
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Start(System.Drawing.PointF,System.Drawing.Point)">
            <summary>
            Starting point of the tracker
            </summary>
            <param name="p">floating-point point</param>
            <param name="h">handle (point)</param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.End">
            <summary>
            Ends the tracking action
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Move(System.Drawing.PointF,System.Drawing.Size,System.Boolean,System.Int32)">
            <summary>
            Moves the tracker to the specified location, normally attached to the mouse move.
            </summary>
            <param name="p">a point, should be the cursor location</param>
            <param name="snap"></param>
    