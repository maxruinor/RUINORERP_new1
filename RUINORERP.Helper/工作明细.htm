<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>工作明细</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body><A 
href="https://www.cnblogs.com/study10000/p/17049621.html">https://www.cnblogs.com/study10000/p/17049621.html</A>
<P>     in&nbsp;    sql扩展？</P>
<P>     TreeDataGridView.dll&nbsp;&nbsp;     显示bom    表，带树形的表格</P>
<P><STRONG><FONT color=#ff0000>有一个权限是&nbsp; 
比方销售只能看到自己的客户及订单。</FONT></STRONG>    </P>
<P> 权限 --角色 分到和 模块 菜单等关系</P>
<P>     工作流分配审核人员?</P>
<P>审核！</P>
<P>  &nbsp;</P>
<P><BR>编辑窗体时的标记不对 Edited&nbsp; --这个涉及到</P>
<P>产品的增删改查 </P>
<P>单据的增删改查 </P>
<P>后面就是单据的审核 </P>
<P>再多个单据实现至少一到两个。完成基础进销存业务后再完善其它，权限？ </P>
<P>时间字段 可以为空，单据加LastChanged timestamp格式 锁单？ </P>
<P>&nbsp;</P>
<P>再把数据库，过一遍，把外键关系补上。再重新生成。</P>
<P>完成公共导入导出。准备数据转移的</P>
<P>基础数据 删除时 缓存可能出错</P>
<P>采购入库表 </P>
<P>入库表 主表也仓库，子表也有仓库和货架，子表优先级高于主表?</P>
<P>更新有几个情况： 主无时。主子都插入。 主有时，子更新或插入或删除</P>
<P>复制性新增-》基类实现？</P>
<P>做一个通用主子表查询的窗体</P>
<P>下拉如果不是外键表格式，用枚举的暂时无法自动。是否用数据表代替？</P>
<P>通用查询 字段排序用数据库保存？</P>
<P>单据修改时，明细中修改一下 主单不动 保存还是灰色。</P>
<P>盘点功能</P>
<P>事务</P>
<P>&nbsp;</P>
<P>aop切面功能 事务 日志 权限</P>
<P>主子表？</P>
<P>&nbsp;</P>
<P><A 
href="https://blog.51cto.com/u_15127614/4374560">https://blog.51cto.com/u_15127614/4374560</A> 
</P>
<P><A 
href="https://www.codenong.com/cs106647047/">https://www.codenong.com/cs106647047/</A> 
</P>
<P>切面提示到UI？ 将切面AOP放到全局？ 如果搞不定。就把AOP放到UI层来。用ma</P>
<P>&nbsp;</P>
<P>拦截器怎么传入传出参数</P>
<P>可以做日志、监控、权限控制、还可以做 tag缓存。 </P>
<P>&nbsp;</P>
<P>2）修改模块 实现事务性添加主子表，尝试导航插入？</P>
<P>利用 子表中有Detail并且包含了主表名的关系来判断是否是一对组合 </P>
<P>try<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Model.tb_Unit unit = new 
tb_Unit();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
unit.Unit_ID = 
6;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
unit.UnitName = 
"transtest";<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
// 
开启事务，保证数据一致性<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
_unitOfWorkManage.BeginTran();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
//先添加再删除<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
//await 
_unitServices.Add(unit);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
//await 
_unitServices.DeleteById(1);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
////先删除再添加<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
///<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Model.tb_Unit unit1 = new 
tb_Unit();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
unit1.Unit_ID = 
4;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
unit1.UnitName = "transtest44";</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
await _unitServices.Add(unit);</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
await _unitServices.Add(unit1);</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
await _unitServices.DeleteById(110);</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
// 
注意信息的完整性<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
_unitOfWorkManage.CommitTran();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
_logger.Error("事务成功");<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
rs = 
true;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
catch (Exception 
ex)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
_logger.Error(ex);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
_unitOfWorkManage.RollbackTran();<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
_logger.Error("事务回滚");<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
}</P>
<P>3）帮助提示系统， </P>
<P><BR>4）分页功能</P>
<P>&nbsp;&nbsp; var getPage =                                                                                     db.Queryable&lt;StudentModel&gt;().Where(it =&gt; 
it.Id == 1).ToPageList(1, 2, ref total);//根据分页查询</P>
<P>&nbsp;</P></body>
</html>
