
// IPlugin.cs
public interface IPlugin
{
    string Name { get; }
    void Execute();
}

// PluginManager.cs
public class PluginManager
{
    private readonly IEnumerable<IPlugin> _plugins;

    public PluginManager(IEnumerable<IPlugin> plugins)
    {
        _plugins = plugins;
    }

    public void ExecuteAll()
    {
        foreach (var plugin in _plugins)
        {
            plugin.Execute();
        }
    }
}

// MyPlugin.cs
public class MyPlugin : IPlugin
{
    public string Name => "MyPlugin";

    public void Execute()
    {
        Console.WriteLine($"Executing {Name}");
    }
}

// Program.cs
public class Program
{
    public static void Main(string[] args)
    {
        // 假设你有一个插件目录，并且已经加载了所有插件
        var plugins = Directory.GetFiles("Plugins", "*.dll")
                             .Select(Assembly.LoadFile)
                             .SelectMany(assembly => assembly.GetTypes())
                             .Where(type => typeof(IPlugin).IsAssignableFrom(type) && !type.IsAbstract)
                             .Select(type => (IPlugin)Activator.CreateInstance(type));

        var pluginManager = new PluginManager(plugins);
        pluginManager.ExecuteAll();
    }
}在这个示例中，IPlugin 是插件需要实现的接口。PluginManager 负责执行所有插件。MyPlugin 是一个具体的插件实现。在 Program.Main 中，我们模拟了插件的加载过程，通过扫描特定目录下的DLL文件，加载并创建插件实例。

请注意，这个示例是一个简化的版本，实际的插件系统可能需要更复杂的错误处理、插件隔离、安全性检查和配置管理。此外，你可能需要使用专门的插件加载库，如Costura或NuGet包管理，来帮助管理插件的加载和依赖关系
。

